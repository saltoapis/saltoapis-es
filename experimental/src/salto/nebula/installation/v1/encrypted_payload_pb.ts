// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=none"
// @generated from file salto/nebula/installation/v1/encrypted_payload.proto (package salto.nebula.installation.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * The request message for [`IngestEncryptedPayloads`][salto.nebula.installation.v1.EncryptedPayloadService.IngestEncryptedPayloads]
 *
 * @generated from message salto.nebula.installation.v1.IngestEncryptedPayloadsRequest
 */
export class IngestEncryptedPayloadsRequest extends Message<IngestEncryptedPayloadsRequest> {
  /**
   * The parent installation resource name.
   * For example: `installations/surelock-homes-hq`.
   *
   * @generated from field: string installation = 1;
   */
  installation = "";

  /**
   * The encrypted payloads to be ingested.
   *
   * @generated from field: repeated bytes encrypted_payloads = 2;
   */
  encryptedPayloads: Uint8Array[] = [];

  constructor(data?: PartialMessage<IngestEncryptedPayloadsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "salto.nebula.installation.v1.IngestEncryptedPayloadsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "installation", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "encrypted_payloads", kind: "scalar", T: 12 /* ScalarType.BYTES */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IngestEncryptedPayloadsRequest {
    return new IngestEncryptedPayloadsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IngestEncryptedPayloadsRequest {
    return new IngestEncryptedPayloadsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IngestEncryptedPayloadsRequest {
    return new IngestEncryptedPayloadsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: IngestEncryptedPayloadsRequest | PlainMessage<IngestEncryptedPayloadsRequest> | undefined, b: IngestEncryptedPayloadsRequest | PlainMessage<IngestEncryptedPayloadsRequest> | undefined): boolean {
    return proto3.util.equals(IngestEncryptedPayloadsRequest, a, b);
  }
}

/**
 * The response message for [`IngestEncryptedPayloads`][salto.nebula.installation.v1.EncryptedPayloadService.IngestEncryptedPayloads]
 *
 * @generated from message salto.nebula.installation.v1.IngestEncryptedPayloadsResponse
 */
export class IngestEncryptedPayloadsResponse extends Message<IngestEncryptedPayloadsResponse> {
  constructor(data?: PartialMessage<IngestEncryptedPayloadsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "salto.nebula.installation.v1.IngestEncryptedPayloadsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IngestEncryptedPayloadsResponse {
    return new IngestEncryptedPayloadsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IngestEncryptedPayloadsResponse {
    return new IngestEncryptedPayloadsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IngestEncryptedPayloadsResponse {
    return new IngestEncryptedPayloadsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: IngestEncryptedPayloadsResponse | PlainMessage<IngestEncryptedPayloadsResponse> | undefined, b: IngestEncryptedPayloadsResponse | PlainMessage<IngestEncryptedPayloadsResponse> | undefined): boolean {
    return proto3.util.equals(IngestEncryptedPayloadsResponse, a, b);
  }
}

