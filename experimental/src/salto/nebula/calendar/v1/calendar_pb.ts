// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=none"
// @generated from file salto/nebula/calendar/v1/calendar.proto (package salto.nebula.calendar.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { FieldMask, Message, proto3 } from "@bufbuild/protobuf";
import { DayType } from "@saltoapis/nebula-type";
import { Date } from "@saltoapis/type";

/**
 * The calendar object
 *
 * @generated from message salto.nebula.calendar.v1.Calendar
 */
export class Calendar extends Message<Calendar> {
  /**
   *  Resource name of the calendar. It must have the format of
   * `installations/*\/calendars/*`. For example:
   * `installations/surelock-homes-hq/calendars/gmt`.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * Display name of the calendar.
   *
   * @generated from field: string display_name = 2;
   */
  displayName = "";

  constructor(data?: PartialMessage<Calendar>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "salto.nebula.calendar.v1.Calendar";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "display_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Calendar {
    return new Calendar().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Calendar {
    return new Calendar().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Calendar {
    return new Calendar().fromJsonString(jsonString, options);
  }

  static equals(a: Calendar | PlainMessage<Calendar> | undefined, b: Calendar | PlainMessage<Calendar> | undefined): boolean {
    return proto3.util.equals(Calendar, a, b);
  }
}

/**
 * @generated from message salto.nebula.calendar.v1.Event
 */
export class Event extends Message<Event> {
  /**
   * Output only. Resource name of the calendar event. It must have the
   * format of `installations/*\/calendars/*\/events/*`. For example:
   * `installations/surelock-homes-hq/calendars/gmt/events/twelvetide`.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * Day type.
   *
   * @generated from field: salto.nebula.type.DayType day_type = 2;
   */
  dayType = DayType.DAY_TYPE_UNSPECIFIED;

  /**
   * Start date.
   *
   * @generated from field: salto.type.Date start_date = 3;
   */
  startDate?: Date;

  /**
   * End date.
   *
   * @generated from field: salto.type.Date end_date = 4;
   */
  endDate?: Date;

  constructor(data?: PartialMessage<Event>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "salto.nebula.calendar.v1.Event";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "day_type", kind: "enum", T: proto3.getEnumType(DayType) },
    { no: 3, name: "start_date", kind: "message", T: Date },
    { no: 4, name: "end_date", kind: "message", T: Date },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Event {
    return new Event().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Event {
    return new Event().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Event {
    return new Event().fromJsonString(jsonString, options);
  }

  static equals(a: Event | PlainMessage<Event> | undefined, b: Event | PlainMessage<Event> | undefined): boolean {
    return proto3.util.equals(Event, a, b);
  }
}

/**
 * The request message for [`CreateCalendar`][salto.nebula.mobilekey.v1.MobileKeyService.CreateCalendar]
 *
 * @generated from message salto.nebula.calendar.v1.CreateCalendarRequest
 */
export class CreateCalendarRequest extends Message<CreateCalendarRequest> {
  /**
   * Resource name of the parent resource where to create the calendar. For
   * example: `installations/surelock-homes-hq`.
   *
   * @generated from field: string parent = 1;
   */
  parent = "";

  /**
   * The calendar ID to use for this calendar. In case it's empty
   * the server will autogenerate a unique identifier.
   *
   * @generated from field: optional string calendar_id = 2;
   */
  calendarId?: string;

  /**
   * The calendar resource to be created. Client must not set the
   * `Calendar.name` field.
   *
   * @generated from field: salto.nebula.calendar.v1.Calendar calendar = 3;
   */
  calendar?: Calendar;

  constructor(data?: PartialMessage<CreateCalendarRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "salto.nebula.calendar.v1.CreateCalendarRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "parent", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "calendar_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "calendar", kind: "message", T: Calendar },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateCalendarRequest {
    return new CreateCalendarRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateCalendarRequest {
    return new CreateCalendarRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateCalendarRequest {
    return new CreateCalendarRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateCalendarRequest | PlainMessage<CreateCalendarRequest> | undefined, b: CreateCalendarRequest | PlainMessage<CreateCalendarRequest> | undefined): boolean {
    return proto3.util.equals(CreateCalendarRequest, a, b);
  }
}

/**
 * The request message for [`GetCalendar`][salto.nebula.calendar.v1.CalendarService.GetCalendar]
 *
 * @generated from message salto.nebula.calendar.v1.GetCalendarRequest
 */
export class GetCalendarRequest extends Message<GetCalendarRequest> {
  /**
   * The name of the requested calendar resource. For example:
   * `installations/surelock-homes-hq/calendars/gmt`.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<GetCalendarRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "salto.nebula.calendar.v1.GetCalendarRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCalendarRequest {
    return new GetCalendarRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCalendarRequest {
    return new GetCalendarRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCalendarRequest {
    return new GetCalendarRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetCalendarRequest | PlainMessage<GetCalendarRequest> | undefined, b: GetCalendarRequest | PlainMessage<GetCalendarRequest> | undefined): boolean {
    return proto3.util.equals(GetCalendarRequest, a, b);
  }
}

/**
 * The request message for [`ListCalendars`][salto.nebula.calendar.v1.CalendarService.ListCalendars]
 *
 * @generated from message salto.nebula.calendar.v1.ListCalendarsRequest
 */
export class ListCalendarsRequest extends Message<ListCalendarsRequest> {
  /**
   * The parent resource name. For example: `installations/surelock-homes-hq`.
   *
   * @generated from field: string parent = 1;
   */
  parent = "";

  /**
   * The maximum number of items to return.
   *
   * @generated from field: int32 page_size = 2;
   */
  pageSize = 0;

  /**
   * The `next_page_token` value returned from a previous `List` request, if
   * any.
   *
   * @generated from field: string page_token = 3;
   */
  pageToken = "";

  /**
   * A filter that chooses which calendars to return.
   *
   * @generated from field: string filter = 4;
   */
  filter = "";

  /**
   * How the results should be sorted.
   *
   * @generated from field: string order_by = 5;
   */
  orderBy = "";

  constructor(data?: PartialMessage<ListCalendarsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "salto.nebula.calendar.v1.ListCalendarsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "parent", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "page_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "filter", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "order_by", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListCalendarsRequest {
    return new ListCalendarsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListCalendarsRequest {
    return new ListCalendarsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListCalendarsRequest {
    return new ListCalendarsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListCalendarsRequest | PlainMessage<ListCalendarsRequest> | undefined, b: ListCalendarsRequest | PlainMessage<ListCalendarsRequest> | undefined): boolean {
    return proto3.util.equals(ListCalendarsRequest, a, b);
  }
}

/**
 * The response message for [`ListCalendars`][salto.nebula.calendar.v1.CalendarService.ListCalendars]
 *
 * @generated from message salto.nebula.calendar.v1.ListCalendarsResponse
 */
export class ListCalendarsResponse extends Message<ListCalendarsResponse> {
  /**
   * The field name should match the noun `calendars` in the method name.
   * There will be a maximum number of items returned based on the `page_size`
   * field in the request.
   *
   * @generated from field: repeated salto.nebula.calendar.v1.Calendar calendars = 1;
   */
  calendars: Calendar[] = [];

  /**
   * Token to retrieve the next page of results, or empty if there are no more
   * results in the list.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListCalendarsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "salto.nebula.calendar.v1.ListCalendarsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "calendars", kind: "message", T: Calendar, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListCalendarsResponse {
    return new ListCalendarsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListCalendarsResponse {
    return new ListCalendarsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListCalendarsResponse {
    return new ListCalendarsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListCalendarsResponse | PlainMessage<ListCalendarsResponse> | undefined, b: ListCalendarsResponse | PlainMessage<ListCalendarsResponse> | undefined): boolean {
    return proto3.util.equals(ListCalendarsResponse, a, b);
  }
}

/**
 * The response message for [`UpdateCalendar`][salto.nebula.calendar.v1.CalendarService.UpdateCalendar]
 *
 * @generated from message salto.nebula.calendar.v1.UpdateCalendarRequest
 */
export class UpdateCalendarRequest extends Message<UpdateCalendarRequest> {
  /**
   * The calendar resource which replaces the resource on the server.
   *
   * @generated from field: salto.nebula.calendar.v1.Calendar calendar = 1;
   */
  calendar?: Calendar;

  /**
   * The update mask applied to the resource.
   *
   * @generated from field: google.protobuf.FieldMask update_mask = 2;
   */
  updateMask?: FieldMask;

  constructor(data?: PartialMessage<UpdateCalendarRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "salto.nebula.calendar.v1.UpdateCalendarRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "calendar", kind: "message", T: Calendar },
    { no: 2, name: "update_mask", kind: "message", T: FieldMask },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateCalendarRequest {
    return new UpdateCalendarRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateCalendarRequest {
    return new UpdateCalendarRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateCalendarRequest {
    return new UpdateCalendarRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateCalendarRequest | PlainMessage<UpdateCalendarRequest> | undefined, b: UpdateCalendarRequest | PlainMessage<UpdateCalendarRequest> | undefined): boolean {
    return proto3.util.equals(UpdateCalendarRequest, a, b);
  }
}

/**
 * The response message for [`DeleteCalendar`][salto.nebula.calendar.v1.CalendarService.DeleteCalendar]
 *
 * @generated from message salto.nebula.calendar.v1.DeleteCalendarRequest
 */
export class DeleteCalendarRequest extends Message<DeleteCalendarRequest> {
  /**
   * The resource name of the calendar to be deleted. For example:
   * `installations/surelock-homes-hq/calendars/gmt`.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<DeleteCalendarRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "salto.nebula.calendar.v1.DeleteCalendarRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteCalendarRequest {
    return new DeleteCalendarRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteCalendarRequest {
    return new DeleteCalendarRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteCalendarRequest {
    return new DeleteCalendarRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteCalendarRequest | PlainMessage<DeleteCalendarRequest> | undefined, b: DeleteCalendarRequest | PlainMessage<DeleteCalendarRequest> | undefined): boolean {
    return proto3.util.equals(DeleteCalendarRequest, a, b);
  }
}

/**
 * The request message for [`CreateEvent`][salto.nebula.calendar.v1.CalendarService.CreateEvent]
 *
 * @generated from message salto.nebula.calendar.v1.CreateEventRequest
 */
export class CreateEventRequest extends Message<CreateEventRequest> {
  /**
   * Resource name of the parent resource where to create the calendar
   * event. For example: `installations/surelock-homes-hq/calendars/gmt`.
   *
   * @generated from field: string parent = 1;
   */
  parent = "";

  /**
   * The event ID to use for this calendar event. In case it's
   * empty the server will autogenerate a unique identifier.
   *
   * @generated from field: optional string event_id = 2;
   */
  eventId?: string;

  /**
   * The calendar event resource to be created. Client must not set the
   * `Event.name` field.
   *
   * @generated from field: salto.nebula.calendar.v1.Event event = 3;
   */
  event?: Event;

  constructor(data?: PartialMessage<CreateEventRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "salto.nebula.calendar.v1.CreateEventRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "parent", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "event_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "event", kind: "message", T: Event },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateEventRequest {
    return new CreateEventRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateEventRequest {
    return new CreateEventRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateEventRequest {
    return new CreateEventRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateEventRequest | PlainMessage<CreateEventRequest> | undefined, b: CreateEventRequest | PlainMessage<CreateEventRequest> | undefined): boolean {
    return proto3.util.equals(CreateEventRequest, a, b);
  }
}

/**
 * The request message for [`GetEvent`][salto.nebula.calendar.v1.CalendarService.GetEvent]
 *
 * @generated from message salto.nebula.calendar.v1.GetEventRequest
 */
export class GetEventRequest extends Message<GetEventRequest> {
  /**
   * The name of the requested calendar event resource. For example:
   * `installations/surelock-homes-hq/calendars/gmt/events/twelvetide`.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<GetEventRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "salto.nebula.calendar.v1.GetEventRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetEventRequest {
    return new GetEventRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetEventRequest {
    return new GetEventRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetEventRequest {
    return new GetEventRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetEventRequest | PlainMessage<GetEventRequest> | undefined, b: GetEventRequest | PlainMessage<GetEventRequest> | undefined): boolean {
    return proto3.util.equals(GetEventRequest, a, b);
  }
}

/**
 * The request message for [`ListEvent`][salto.nebula.calendar.v1.CalendarService.ListEvent]
 *
 * @generated from message salto.nebula.calendar.v1.ListEventsRequest
 */
export class ListEventsRequest extends Message<ListEventsRequest> {
  /**
   * The parent resource name. For example:
   * `installations/surelock-homes-hq/calendars/gmt`.
   *
   * @generated from field: string parent = 1;
   */
  parent = "";

  /**
   * The maximum number of items to return.
   *
   * @generated from field: int32 page_size = 2;
   */
  pageSize = 0;

  /**
   * The `next_page_token` value returned from a previous `List` request, if
   * any.
   *
   * @generated from field: string page_token = 3;
   */
  pageToken = "";

  /**
   * A filter that chooses which calendar events to return.
   *
   * @generated from field: string filter = 4;
   */
  filter = "";

  /**
   * How the results should be sorted.
   *
   * @generated from field: string order_by = 5;
   */
  orderBy = "";

  constructor(data?: PartialMessage<ListEventsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "salto.nebula.calendar.v1.ListEventsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "parent", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "page_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "filter", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "order_by", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListEventsRequest {
    return new ListEventsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListEventsRequest {
    return new ListEventsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListEventsRequest {
    return new ListEventsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListEventsRequest | PlainMessage<ListEventsRequest> | undefined, b: ListEventsRequest | PlainMessage<ListEventsRequest> | undefined): boolean {
    return proto3.util.equals(ListEventsRequest, a, b);
  }
}

/**
 * The response message for [`ListEvent`][salto.nebula.calendar.v1.CalendarService.ListEvent]
 *
 * @generated from message salto.nebula.calendar.v1.ListEventsResponse
 */
export class ListEventsResponse extends Message<ListEventsResponse> {
  /**
   * The field name should match the noun `events` in the method name. There
   * will be a maximum number of items
   * returned based on the `page_size` field in the request.
   *
   * @generated from field: repeated salto.nebula.calendar.v1.Event events = 1;
   */
  events: Event[] = [];

  /**
   * Token to retrieve the next page of results, or empty if there are no more
   * results in the list.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListEventsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "salto.nebula.calendar.v1.ListEventsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "events", kind: "message", T: Event, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListEventsResponse {
    return new ListEventsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListEventsResponse {
    return new ListEventsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListEventsResponse {
    return new ListEventsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListEventsResponse | PlainMessage<ListEventsResponse> | undefined, b: ListEventsResponse | PlainMessage<ListEventsResponse> | undefined): boolean {
    return proto3.util.equals(ListEventsResponse, a, b);
  }
}

/**
 * The response message for [`UpdateEvent`][salto.nebula.calendar.v1.CalendarService.UpdateEvent]
 *
 * @generated from message salto.nebula.calendar.v1.UpdateEventRequest
 */
export class UpdateEventRequest extends Message<UpdateEventRequest> {
  /**
   * The calendar event resource which replaces the resource on the server.
   *
   * @generated from field: salto.nebula.calendar.v1.Event event = 1;
   */
  event?: Event;

  /**
   * The update mask applied to the resource.
   *
   * @generated from field: google.protobuf.FieldMask update_mask = 2;
   */
  updateMask?: FieldMask;

  constructor(data?: PartialMessage<UpdateEventRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "salto.nebula.calendar.v1.UpdateEventRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "event", kind: "message", T: Event },
    { no: 2, name: "update_mask", kind: "message", T: FieldMask },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateEventRequest {
    return new UpdateEventRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateEventRequest {
    return new UpdateEventRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateEventRequest {
    return new UpdateEventRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateEventRequest | PlainMessage<UpdateEventRequest> | undefined, b: UpdateEventRequest | PlainMessage<UpdateEventRequest> | undefined): boolean {
    return proto3.util.equals(UpdateEventRequest, a, b);
  }
}

/**
 * The response message for [`DeleteEvent`][salto.nebula.calendar.v1.CalendarService.DeleteEvent]
 *
 * @generated from message salto.nebula.calendar.v1.DeleteEventRequest
 */
export class DeleteEventRequest extends Message<DeleteEventRequest> {
  /**
   * The resource name of the calendar event to be deleted. For example:
   * `installations/surelock-homes-hq/calendars/gmt/events/twelvetide`.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<DeleteEventRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "salto.nebula.calendar.v1.DeleteEventRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteEventRequest {
    return new DeleteEventRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteEventRequest {
    return new DeleteEventRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteEventRequest {
    return new DeleteEventRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteEventRequest | PlainMessage<DeleteEventRequest> | undefined, b: DeleteEventRequest | PlainMessage<DeleteEventRequest> | undefined): boolean {
    return proto3.util.equals(DeleteEventRequest, a, b);
  }
}

