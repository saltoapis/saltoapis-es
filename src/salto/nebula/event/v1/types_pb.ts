// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=none"
// @generated from file salto/nebula/event/v1/types.proto (package salto.nebula.event.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { AppKey, CardKey, ElectronicKey, Passcode, User, WalletKey } from "@saltoapis/nebula-user-v1";
import { AccessPoint } from "@saltoapis/nebula-accesspoint-v1";
import { EmergencyKey } from "@saltoapis/nebula-emergencykey-v1";
import { AccessRight } from "@saltoapis/nebula-accessright-v1";
import { Unit } from "@saltoapis/nebula-unit-v1";

/**
 * Represents the principal entity that initiated or performed an action
 * associated with an event. This could be a user, a service account, or
 * potentially other types of entities in the future.
 *
 * @generated from message salto.nebula.event.v1.Principal
 */
export class Principal extends Message<Principal> {
  /**
   * A user represents a human actor within the system.
   *
   * @generated from field: salto.nebula.user.v1.User user = 1;
   */
  user?: User;

  constructor(data?: PartialMessage<Principal>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "salto.nebula.event.v1.Principal";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user", kind: "message", T: User },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Principal {
    return new Principal().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Principal {
    return new Principal().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Principal {
    return new Principal().fromJsonString(jsonString, options);
  }

  static equals(a: Principal | PlainMessage<Principal> | undefined, b: Principal | PlainMessage<Principal> | undefined): boolean {
    return proto3.util.equals(Principal, a, b);
  }
}

/**
 * Event representing the creation of an access point.
 *
 * @generated from message salto.nebula.event.v1.AccessPointCreated
 */
export class AccessPointCreated extends Message<AccessPointCreated> {
  /**
   * Access point created.
   *
   * @generated from field: salto.nebula.accesspoint.v1.AccessPoint access_point = 1;
   */
  accessPoint?: AccessPoint;

  /**
   * The actor who created the access point.
   *
   * @generated from field: salto.nebula.event.v1.Principal actor = 2;
   */
  actor?: Principal;

  constructor(data?: PartialMessage<AccessPointCreated>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "salto.nebula.event.v1.AccessPointCreated";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "access_point", kind: "message", T: AccessPoint },
    { no: 2, name: "actor", kind: "message", T: Principal },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccessPointCreated {
    return new AccessPointCreated().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccessPointCreated {
    return new AccessPointCreated().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccessPointCreated {
    return new AccessPointCreated().fromJsonString(jsonString, options);
  }

  static equals(a: AccessPointCreated | PlainMessage<AccessPointCreated> | undefined, b: AccessPointCreated | PlainMessage<AccessPointCreated> | undefined): boolean {
    return proto3.util.equals(AccessPointCreated, a, b);
  }
}

/**
 * Event representing the update of an access point.
 *
 * @generated from message salto.nebula.event.v1.AccessPointUpdated
 */
export class AccessPointUpdated extends Message<AccessPointUpdated> {
  /**
   * Access point updated.
   *
   * @generated from field: salto.nebula.accesspoint.v1.AccessPoint access_point = 1;
   */
  accessPoint?: AccessPoint;

  /**
   * The actor who updated the access point.
   *
   * @generated from field: salto.nebula.event.v1.Principal actor = 2;
   */
  actor?: Principal;

  constructor(data?: PartialMessage<AccessPointUpdated>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "salto.nebula.event.v1.AccessPointUpdated";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "access_point", kind: "message", T: AccessPoint },
    { no: 2, name: "actor", kind: "message", T: Principal },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccessPointUpdated {
    return new AccessPointUpdated().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccessPointUpdated {
    return new AccessPointUpdated().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccessPointUpdated {
    return new AccessPointUpdated().fromJsonString(jsonString, options);
  }

  static equals(a: AccessPointUpdated | PlainMessage<AccessPointUpdated> | undefined, b: AccessPointUpdated | PlainMessage<AccessPointUpdated> | undefined): boolean {
    return proto3.util.equals(AccessPointUpdated, a, b);
  }
}

/**
 * Event representing the deletion of an access point.
 *
 * @generated from message salto.nebula.event.v1.AccessPointDeleted
 */
export class AccessPointDeleted extends Message<AccessPointDeleted> {
  /**
   * Access point deleted.
   *
   * @generated from field: salto.nebula.accesspoint.v1.AccessPoint access_point = 1;
   */
  accessPoint?: AccessPoint;

  /**
   * The actor who deleted the access point.
   *
   * @generated from field: salto.nebula.event.v1.Principal actor = 2;
   */
  actor?: Principal;

  constructor(data?: PartialMessage<AccessPointDeleted>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "salto.nebula.event.v1.AccessPointDeleted";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "access_point", kind: "message", T: AccessPoint },
    { no: 2, name: "actor", kind: "message", T: Principal },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccessPointDeleted {
    return new AccessPointDeleted().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccessPointDeleted {
    return new AccessPointDeleted().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccessPointDeleted {
    return new AccessPointDeleted().fromJsonString(jsonString, options);
  }

  static equals(a: AccessPointDeleted | PlainMessage<AccessPointDeleted> | undefined, b: AccessPointDeleted | PlainMessage<AccessPointDeleted> | undefined): boolean {
    return proto3.util.equals(AccessPointDeleted, a, b);
  }
}

/**
 * Event representing the unlocking of an access point.
 *
 * @generated from message salto.nebula.event.v1.AccessPointUnlocked
 */
export class AccessPointUnlocked extends Message<AccessPointUnlocked> {
  /**
   * The access point that's been unlocked.
   *
   * @generated from field: salto.nebula.accesspoint.v1.AccessPoint access_point = 1;
   */
  accessPoint?: AccessPoint;

  /**
   * The user who unlocked the access point, if any.
   *
   * @generated from field: salto.nebula.user.v1.User user = 2;
   */
  user?: User;

  /**
   * The credential type used to unlock the access point.
   *
   * @generated from oneof salto.nebula.event.v1.AccessPointUnlocked.credential
   */
  credential: {
    /**
     * The emergency key used to unlock the access point.
     *
     * @generated from field: salto.nebula.emergencykey.v1.EmergencyKey emergency_key = 3;
     */
    value: EmergencyKey;
    case: "emergencyKey";
  } | {
    /**
     * The card key used to unlock the access point.
     *
     * @generated from field: salto.nebula.user.v1.CardKey card_key = 4;
     */
    value: CardKey;
    case: "cardKey";
  } | {
    /**
     * The app key used to unlock the access point.
     *
     * @generated from field: salto.nebula.user.v1.AppKey app_key = 5;
     */
    value: AppKey;
    case: "appKey";
  } | {
    /**
     * The wallet key used to unlock the access point.
     *
     * @generated from field: salto.nebula.user.v1.WalletKey wallet_key = 6;
     */
    value: WalletKey;
    case: "walletKey";
  } | {
    /**
     * The passcode used to unlock the access point.
     *
     * @generated from field: salto.nebula.user.v1.Passcode passcode = 7;
     */
    value: Passcode;
    case: "passcode";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<AccessPointUnlocked>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "salto.nebula.event.v1.AccessPointUnlocked";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "access_point", kind: "message", T: AccessPoint },
    { no: 2, name: "user", kind: "message", T: User },
    { no: 3, name: "emergency_key", kind: "message", T: EmergencyKey, oneof: "credential" },
    { no: 4, name: "card_key", kind: "message", T: CardKey, oneof: "credential" },
    { no: 5, name: "app_key", kind: "message", T: AppKey, oneof: "credential" },
    { no: 6, name: "wallet_key", kind: "message", T: WalletKey, oneof: "credential" },
    { no: 7, name: "passcode", kind: "message", T: Passcode, oneof: "credential" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccessPointUnlocked {
    return new AccessPointUnlocked().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccessPointUnlocked {
    return new AccessPointUnlocked().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccessPointUnlocked {
    return new AccessPointUnlocked().fromJsonString(jsonString, options);
  }

  static equals(a: AccessPointUnlocked | PlainMessage<AccessPointUnlocked> | undefined, b: AccessPointUnlocked | PlainMessage<AccessPointUnlocked> | undefined): boolean {
    return proto3.util.equals(AccessPointUnlocked, a, b);
  }
}

/**
 * Event representing the locking of an access point.
 *
 * @generated from message salto.nebula.event.v1.AccessPointLocked
 */
export class AccessPointLocked extends Message<AccessPointLocked> {
  /**
   * The access point that's been locked.
   *
   * @generated from field: salto.nebula.accesspoint.v1.AccessPoint access_point = 1;
   */
  accessPoint?: AccessPoint;

  /**
   * The user who locked the access point, if any.
   *
   * @generated from field: salto.nebula.user.v1.User user = 2;
   */
  user?: User;

  /**
   * The credential type used to lock the access point.
   *
   * @generated from oneof salto.nebula.event.v1.AccessPointLocked.credential
   */
  credential: {
    /**
     * The emergency key used to lock the access point.
     *
     * @generated from field: salto.nebula.emergencykey.v1.EmergencyKey emergency_key = 3;
     */
    value: EmergencyKey;
    case: "emergencyKey";
  } | {
    /**
     * The card key used to lock the access point.
     *
     * @generated from field: salto.nebula.user.v1.CardKey card_key = 4;
     */
    value: CardKey;
    case: "cardKey";
  } | {
    /**
     * The app key used to lock the access point.
     *
     * @generated from field: salto.nebula.user.v1.AppKey app_key = 5;
     */
    value: AppKey;
    case: "appKey";
  } | {
    /**
     * The wallet key used to lock the access point.
     *
     * @generated from field: salto.nebula.user.v1.WalletKey wallet_key = 6;
     */
    value: WalletKey;
    case: "walletKey";
  } | {
    /**
     * The passcode used to lock the access point.
     *
     * @generated from field: salto.nebula.user.v1.Passcode passcode = 7;
     */
    value: Passcode;
    case: "passcode";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<AccessPointLocked>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "salto.nebula.event.v1.AccessPointLocked";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "access_point", kind: "message", T: AccessPoint },
    { no: 2, name: "user", kind: "message", T: User },
    { no: 3, name: "emergency_key", kind: "message", T: EmergencyKey, oneof: "credential" },
    { no: 4, name: "card_key", kind: "message", T: CardKey, oneof: "credential" },
    { no: 5, name: "app_key", kind: "message", T: AppKey, oneof: "credential" },
    { no: 6, name: "wallet_key", kind: "message", T: WalletKey, oneof: "credential" },
    { no: 7, name: "passcode", kind: "message", T: Passcode, oneof: "credential" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccessPointLocked {
    return new AccessPointLocked().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccessPointLocked {
    return new AccessPointLocked().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccessPointLocked {
    return new AccessPointLocked().fromJsonString(jsonString, options);
  }

  static equals(a: AccessPointLocked | PlainMessage<AccessPointLocked> | undefined, b: AccessPointLocked | PlainMessage<AccessPointLocked> | undefined): boolean {
    return proto3.util.equals(AccessPointLocked, a, b);
  }
}

/**
 * Event representing a forced open of an access point.
 *
 * @generated from message salto.nebula.event.v1.AccessPointForcedOpen
 */
export class AccessPointForcedOpen extends Message<AccessPointForcedOpen> {
  /**
   * The access point that's been forced open.
   *
   * @generated from field: salto.nebula.accesspoint.v1.AccessPoint access_point = 1;
   */
  accessPoint?: AccessPoint;

  constructor(data?: PartialMessage<AccessPointForcedOpen>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "salto.nebula.event.v1.AccessPointForcedOpen";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "access_point", kind: "message", T: AccessPoint },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccessPointForcedOpen {
    return new AccessPointForcedOpen().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccessPointForcedOpen {
    return new AccessPointForcedOpen().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccessPointForcedOpen {
    return new AccessPointForcedOpen().fromJsonString(jsonString, options);
  }

  static equals(a: AccessPointForcedOpen | PlainMessage<AccessPointForcedOpen> | undefined, b: AccessPointForcedOpen | PlainMessage<AccessPointForcedOpen> | undefined): boolean {
    return proto3.util.equals(AccessPointForcedOpen, a, b);
  }
}

/**
 * Event representing the closing of an access point.
 * This event might not be triggered with all access point closures, but only
 * with those that happen after events such as access point left open or forced
 * open.
 *
 * @generated from message salto.nebula.event.v1.AccessPointClosed
 */
export class AccessPointClosed extends Message<AccessPointClosed> {
  /**
   * The access point that's been closed.
   *
   * @generated from field: salto.nebula.accesspoint.v1.AccessPoint access_point = 1;
   */
  accessPoint?: AccessPoint;

  constructor(data?: PartialMessage<AccessPointClosed>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "salto.nebula.event.v1.AccessPointClosed";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "access_point", kind: "message", T: AccessPoint },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccessPointClosed {
    return new AccessPointClosed().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccessPointClosed {
    return new AccessPointClosed().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccessPointClosed {
    return new AccessPointClosed().fromJsonString(jsonString, options);
  }

  static equals(a: AccessPointClosed | PlainMessage<AccessPointClosed> | undefined, b: AccessPointClosed | PlainMessage<AccessPointClosed> | undefined): boolean {
    return proto3.util.equals(AccessPointClosed, a, b);
  }
}

/**
 * Event representing a denied access to a user by an access point.
 *
 * @generated from message salto.nebula.event.v1.AccessDenied
 */
export class AccessDenied extends Message<AccessDenied> {
  /**
   * Access denied by the access point.
   *
   * @generated from field: salto.nebula.accesspoint.v1.AccessPoint access_point = 1;
   */
  accessPoint?: AccessPoint;

  /**
   * The user whose access was rejected.
   *
   * @generated from field: salto.nebula.user.v1.User user = 2;
   */
  user?: User;

  /**
   * The reason for the access denial.
   *
   * @generated from field: salto.nebula.event.v1.AccessDenied.Reason reason = 3;
   */
  reason = AccessDenied_Reason.REASON_UNSPECIFIED;

  constructor(data?: PartialMessage<AccessDenied>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "salto.nebula.event.v1.AccessDenied";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "access_point", kind: "message", T: AccessPoint },
    { no: 2, name: "user", kind: "message", T: User },
    { no: 3, name: "reason", kind: "enum", T: proto3.getEnumType(AccessDenied_Reason) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccessDenied {
    return new AccessDenied().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccessDenied {
    return new AccessDenied().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccessDenied {
    return new AccessDenied().fromJsonString(jsonString, options);
  }

  static equals(a: AccessDenied | PlainMessage<AccessDenied> | undefined, b: AccessDenied | PlainMessage<AccessDenied> | undefined): boolean {
    return proto3.util.equals(AccessDenied, a, b);
  }
}

/**
 * The reason for the access denial.
 *
 * @generated from enum salto.nebula.event.v1.AccessDenied.Reason
 */
export enum AccessDenied_Reason {
  /**
   * The reason is not specified.
   *
   * @generated from enum value: REASON_UNSPECIFIED = 0;
   */
  REASON_UNSPECIFIED = 0,

  /**
   * The presented credential has expired.
   *
   * @generated from enum value: CREDENTIAL_EXPIRED = 1;
   */
  CREDENTIAL_EXPIRED = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(AccessDenied_Reason)
proto3.util.setEnumType(AccessDenied_Reason, "salto.nebula.event.v1.AccessDenied.Reason", [
  { no: 0, name: "REASON_UNSPECIFIED" },
  { no: 1, name: "CREDENTIAL_EXPIRED" },
]);

/**
 * Event representing the detection of an access point that's been left open.
 *
 * @generated from message salto.nebula.event.v1.AccessPointLeftOpen
 */
export class AccessPointLeftOpen extends Message<AccessPointLeftOpen> {
  /**
   * The access point that's been left open.
   *
   * @generated from field: salto.nebula.accesspoint.v1.AccessPoint access_point = 1;
   */
  accessPoint?: AccessPoint;

  constructor(data?: PartialMessage<AccessPointLeftOpen>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "salto.nebula.event.v1.AccessPointLeftOpen";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "access_point", kind: "message", T: AccessPoint },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccessPointLeftOpen {
    return new AccessPointLeftOpen().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccessPointLeftOpen {
    return new AccessPointLeftOpen().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccessPointLeftOpen {
    return new AccessPointLeftOpen().fromJsonString(jsonString, options);
  }

  static equals(a: AccessPointLeftOpen | PlainMessage<AccessPointLeftOpen> | undefined, b: AccessPointLeftOpen | PlainMessage<AccessPointLeftOpen> | undefined): boolean {
    return proto3.util.equals(AccessPointLeftOpen, a, b);
  }
}

/**
 * Event representing the creation of an access right.
 *
 * @generated from message salto.nebula.event.v1.AccessRightCreated
 */
export class AccessRightCreated extends Message<AccessRightCreated> {
  /**
   * Access right created.
   *
   * @generated from field: salto.nebula.accessright.v1.AccessRight access_right = 1;
   */
  accessRight?: AccessRight;

  /**
   * The actor who created the access right.
   *
   * @generated from field: salto.nebula.event.v1.Principal actor = 2;
   */
  actor?: Principal;

  constructor(data?: PartialMessage<AccessRightCreated>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "salto.nebula.event.v1.AccessRightCreated";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "access_right", kind: "message", T: AccessRight },
    { no: 2, name: "actor", kind: "message", T: Principal },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccessRightCreated {
    return new AccessRightCreated().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccessRightCreated {
    return new AccessRightCreated().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccessRightCreated {
    return new AccessRightCreated().fromJsonString(jsonString, options);
  }

  static equals(a: AccessRightCreated | PlainMessage<AccessRightCreated> | undefined, b: AccessRightCreated | PlainMessage<AccessRightCreated> | undefined): boolean {
    return proto3.util.equals(AccessRightCreated, a, b);
  }
}

/**
 * Event representing the update of an access right.
 *
 * @generated from message salto.nebula.event.v1.AccessRightUpdated
 */
export class AccessRightUpdated extends Message<AccessRightUpdated> {
  /**
   * Access right updated.
   *
   * @generated from field: salto.nebula.accessright.v1.AccessRight access_right = 1;
   */
  accessRight?: AccessRight;

  /**
   * The actor who updated the access right.
   *
   * @generated from field: salto.nebula.event.v1.Principal actor = 2;
   */
  actor?: Principal;

  constructor(data?: PartialMessage<AccessRightUpdated>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "salto.nebula.event.v1.AccessRightUpdated";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "access_right", kind: "message", T: AccessRight },
    { no: 2, name: "actor", kind: "message", T: Principal },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccessRightUpdated {
    return new AccessRightUpdated().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccessRightUpdated {
    return new AccessRightUpdated().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccessRightUpdated {
    return new AccessRightUpdated().fromJsonString(jsonString, options);
  }

  static equals(a: AccessRightUpdated | PlainMessage<AccessRightUpdated> | undefined, b: AccessRightUpdated | PlainMessage<AccessRightUpdated> | undefined): boolean {
    return proto3.util.equals(AccessRightUpdated, a, b);
  }
}

/**
 * Event representing the deletion of an access right.
 *
 * @generated from message salto.nebula.event.v1.AccessRightDeleted
 */
export class AccessRightDeleted extends Message<AccessRightDeleted> {
  /**
   * Access right deleted.
   *
   * @generated from field: salto.nebula.accessright.v1.AccessRight access_right = 1;
   */
  accessRight?: AccessRight;

  /**
   * The actor who deleted the access right.
   *
   * @generated from field: salto.nebula.event.v1.Principal actor = 2;
   */
  actor?: Principal;

  constructor(data?: PartialMessage<AccessRightDeleted>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "salto.nebula.event.v1.AccessRightDeleted";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "access_right", kind: "message", T: AccessRight },
    { no: 2, name: "actor", kind: "message", T: Principal },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccessRightDeleted {
    return new AccessRightDeleted().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccessRightDeleted {
    return new AccessRightDeleted().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccessRightDeleted {
    return new AccessRightDeleted().fromJsonString(jsonString, options);
  }

  static equals(a: AccessRightDeleted | PlainMessage<AccessRightDeleted> | undefined, b: AccessRightDeleted | PlainMessage<AccessRightDeleted> | undefined): boolean {
    return proto3.util.equals(AccessRightDeleted, a, b);
  }
}

/**
 * Event representing the creation of an access right's access point association.
 *
 * @generated from message salto.nebula.event.v1.AccessRightAccessPointCreated
 */
export class AccessRightAccessPointCreated extends Message<AccessRightAccessPointCreated> {
  /**
   * Access point's access right association created.
   *
   * @generated from field: salto.nebula.accessright.v1.AccessRight access_right = 1;
   */
  accessRight?: AccessRight;

  /**
   * Access right's access point association created.
   *
   * @generated from field: salto.nebula.accesspoint.v1.AccessPoint access_point = 2;
   */
  accessPoint?: AccessPoint;

  constructor(data?: PartialMessage<AccessRightAccessPointCreated>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "salto.nebula.event.v1.AccessRightAccessPointCreated";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "access_right", kind: "message", T: AccessRight },
    { no: 2, name: "access_point", kind: "message", T: AccessPoint },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccessRightAccessPointCreated {
    return new AccessRightAccessPointCreated().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccessRightAccessPointCreated {
    return new AccessRightAccessPointCreated().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccessRightAccessPointCreated {
    return new AccessRightAccessPointCreated().fromJsonString(jsonString, options);
  }

  static equals(a: AccessRightAccessPointCreated | PlainMessage<AccessRightAccessPointCreated> | undefined, b: AccessRightAccessPointCreated | PlainMessage<AccessRightAccessPointCreated> | undefined): boolean {
    return proto3.util.equals(AccessRightAccessPointCreated, a, b);
  }
}

/**
 * Event representing the creation of multiple access right's access points association.
 *
 * @generated from message salto.nebula.event.v1.AccessRightAccessPointsBatchCreated
 */
export class AccessRightAccessPointsBatchCreated extends Message<AccessRightAccessPointsBatchCreated> {
  /**
   * The access right to which the access points have been added.
   *
   * @generated from field: salto.nebula.accessright.v1.AccessRight access_right = 1;
   */
  accessRight?: AccessRight;

  /**
   * The access points added to the access right.
   *
   * @generated from field: repeated salto.nebula.accesspoint.v1.AccessPoint access_points = 2;
   */
  accessPoints: AccessPoint[] = [];

  constructor(data?: PartialMessage<AccessRightAccessPointsBatchCreated>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "salto.nebula.event.v1.AccessRightAccessPointsBatchCreated";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "access_right", kind: "message", T: AccessRight },
    { no: 2, name: "access_points", kind: "message", T: AccessPoint, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccessRightAccessPointsBatchCreated {
    return new AccessRightAccessPointsBatchCreated().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccessRightAccessPointsBatchCreated {
    return new AccessRightAccessPointsBatchCreated().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccessRightAccessPointsBatchCreated {
    return new AccessRightAccessPointsBatchCreated().fromJsonString(jsonString, options);
  }

  static equals(a: AccessRightAccessPointsBatchCreated | PlainMessage<AccessRightAccessPointsBatchCreated> | undefined, b: AccessRightAccessPointsBatchCreated | PlainMessage<AccessRightAccessPointsBatchCreated> | undefined): boolean {
    return proto3.util.equals(AccessRightAccessPointsBatchCreated, a, b);
  }
}

/**
 * Event representing the deletion of an access right's access point association.
 *
 * @generated from message salto.nebula.event.v1.AccessRightAccessPointDeleted
 */
export class AccessRightAccessPointDeleted extends Message<AccessRightAccessPointDeleted> {
  /**
   * Access point's access right association deleted.
   *
   * @generated from field: salto.nebula.accessright.v1.AccessRight access_right = 1;
   */
  accessRight?: AccessRight;

  /**
   * Access right's access point association deleted.
   *
   * @generated from field: salto.nebula.accesspoint.v1.AccessPoint access_point = 2;
   */
  accessPoint?: AccessPoint;

  constructor(data?: PartialMessage<AccessRightAccessPointDeleted>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "salto.nebula.event.v1.AccessRightAccessPointDeleted";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "access_right", kind: "message", T: AccessRight },
    { no: 2, name: "access_point", kind: "message", T: AccessPoint },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccessRightAccessPointDeleted {
    return new AccessRightAccessPointDeleted().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccessRightAccessPointDeleted {
    return new AccessRightAccessPointDeleted().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccessRightAccessPointDeleted {
    return new AccessRightAccessPointDeleted().fromJsonString(jsonString, options);
  }

  static equals(a: AccessRightAccessPointDeleted | PlainMessage<AccessRightAccessPointDeleted> | undefined, b: AccessRightAccessPointDeleted | PlainMessage<AccessRightAccessPointDeleted> | undefined): boolean {
    return proto3.util.equals(AccessRightAccessPointDeleted, a, b);
  }
}

/**
 * Event representing the deletion of multiple access right's access point association.
 *
 * @generated from message salto.nebula.event.v1.AccessRightAccessPointsBatchDeleted
 */
export class AccessRightAccessPointsBatchDeleted extends Message<AccessRightAccessPointsBatchDeleted> {
  /**
   * The access right to which the access points have been removed.
   *
   * @generated from field: salto.nebula.accessright.v1.AccessRight access_right = 1;
   */
  accessRight?: AccessRight;

  /**
   * The access points removed from the access right.
   *
   * @generated from field: repeated salto.nebula.accesspoint.v1.AccessPoint access_points = 2;
   */
  accessPoints: AccessPoint[] = [];

  constructor(data?: PartialMessage<AccessRightAccessPointsBatchDeleted>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "salto.nebula.event.v1.AccessRightAccessPointsBatchDeleted";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "access_right", kind: "message", T: AccessRight },
    { no: 2, name: "access_points", kind: "message", T: AccessPoint, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccessRightAccessPointsBatchDeleted {
    return new AccessRightAccessPointsBatchDeleted().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccessRightAccessPointsBatchDeleted {
    return new AccessRightAccessPointsBatchDeleted().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccessRightAccessPointsBatchDeleted {
    return new AccessRightAccessPointsBatchDeleted().fromJsonString(jsonString, options);
  }

  static equals(a: AccessRightAccessPointsBatchDeleted | PlainMessage<AccessRightAccessPointsBatchDeleted> | undefined, b: AccessRightAccessPointsBatchDeleted | PlainMessage<AccessRightAccessPointsBatchDeleted> | undefined): boolean {
    return proto3.util.equals(AccessRightAccessPointsBatchDeleted, a, b);
  }
}

/**
 * Event representing the creation of a user.
 *
 * @generated from message salto.nebula.event.v1.UserCreated
 */
export class UserCreated extends Message<UserCreated> {
  /**
   * User created.
   *
   * @generated from field: salto.nebula.user.v1.User user = 1;
   */
  user?: User;

  constructor(data?: PartialMessage<UserCreated>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "salto.nebula.event.v1.UserCreated";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user", kind: "message", T: User },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserCreated {
    return new UserCreated().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserCreated {
    return new UserCreated().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserCreated {
    return new UserCreated().fromJsonString(jsonString, options);
  }

  static equals(a: UserCreated | PlainMessage<UserCreated> | undefined, b: UserCreated | PlainMessage<UserCreated> | undefined): boolean {
    return proto3.util.equals(UserCreated, a, b);
  }
}

/**
 * Event representing the update of a user.
 *
 * @generated from message salto.nebula.event.v1.UserUpdated
 */
export class UserUpdated extends Message<UserUpdated> {
  /**
   * User updated.
   *
   * @generated from field: salto.nebula.user.v1.User user = 1;
   */
  user?: User;

  constructor(data?: PartialMessage<UserUpdated>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "salto.nebula.event.v1.UserUpdated";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user", kind: "message", T: User },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserUpdated {
    return new UserUpdated().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserUpdated {
    return new UserUpdated().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserUpdated {
    return new UserUpdated().fromJsonString(jsonString, options);
  }

  static equals(a: UserUpdated | PlainMessage<UserUpdated> | undefined, b: UserUpdated | PlainMessage<UserUpdated> | undefined): boolean {
    return proto3.util.equals(UserUpdated, a, b);
  }
}

/**
 * Event representing the block of a user.
 *
 * @generated from message salto.nebula.event.v1.UserBlocked
 */
export class UserBlocked extends Message<UserBlocked> {
  /**
   * User blocked.
   *
   * @generated from field: salto.nebula.user.v1.User user = 1;
   */
  user?: User;

  constructor(data?: PartialMessage<UserBlocked>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "salto.nebula.event.v1.UserBlocked";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user", kind: "message", T: User },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserBlocked {
    return new UserBlocked().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserBlocked {
    return new UserBlocked().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserBlocked {
    return new UserBlocked().fromJsonString(jsonString, options);
  }

  static equals(a: UserBlocked | PlainMessage<UserBlocked> | undefined, b: UserBlocked | PlainMessage<UserBlocked> | undefined): boolean {
    return proto3.util.equals(UserBlocked, a, b);
  }
}

/**
 * Event representing the unblock of a user.
 *
 * @generated from message salto.nebula.event.v1.UserUnblocked
 */
export class UserUnblocked extends Message<UserUnblocked> {
  /**
   * User unblocked.
   *
   * @generated from field: salto.nebula.user.v1.User user = 1;
   */
  user?: User;

  constructor(data?: PartialMessage<UserUnblocked>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "salto.nebula.event.v1.UserUnblocked";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user", kind: "message", T: User },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserUnblocked {
    return new UserUnblocked().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserUnblocked {
    return new UserUnblocked().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserUnblocked {
    return new UserUnblocked().fromJsonString(jsonString, options);
  }

  static equals(a: UserUnblocked | PlainMessage<UserUnblocked> | undefined, b: UserUnblocked | PlainMessage<UserUnblocked> | undefined): boolean {
    return proto3.util.equals(UserUnblocked, a, b);
  }
}

/**
 * Event representing the deletion of a user.
 *
 * @generated from message salto.nebula.event.v1.UserDeleted
 */
export class UserDeleted extends Message<UserDeleted> {
  /**
   * User deleted.
   *
   * @generated from field: salto.nebula.user.v1.User user = 1;
   */
  user?: User;

  constructor(data?: PartialMessage<UserDeleted>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "salto.nebula.event.v1.UserDeleted";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user", kind: "message", T: User },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserDeleted {
    return new UserDeleted().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserDeleted {
    return new UserDeleted().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserDeleted {
    return new UserDeleted().fromJsonString(jsonString, options);
  }

  static equals(a: UserDeleted | PlainMessage<UserDeleted> | undefined, b: UserDeleted | PlainMessage<UserDeleted> | undefined): boolean {
    return proto3.util.equals(UserDeleted, a, b);
  }
}

/**
 * Event representing the creation of a user's access right association.
 *
 * @generated from message salto.nebula.event.v1.UserAccessRightCreated
 */
export class UserAccessRightCreated extends Message<UserAccessRightCreated> {
  /**
   * Access right's user association created.
   *
   * @generated from field: salto.nebula.user.v1.User user = 1;
   */
  user?: User;

  /**
   * User's access right association created.
   *
   * @generated from field: salto.nebula.accessright.v1.AccessRight access_right = 2;
   */
  accessRight?: AccessRight;

  constructor(data?: PartialMessage<UserAccessRightCreated>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "salto.nebula.event.v1.UserAccessRightCreated";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user", kind: "message", T: User },
    { no: 2, name: "access_right", kind: "message", T: AccessRight },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserAccessRightCreated {
    return new UserAccessRightCreated().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserAccessRightCreated {
    return new UserAccessRightCreated().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserAccessRightCreated {
    return new UserAccessRightCreated().fromJsonString(jsonString, options);
  }

  static equals(a: UserAccessRightCreated | PlainMessage<UserAccessRightCreated> | undefined, b: UserAccessRightCreated | PlainMessage<UserAccessRightCreated> | undefined): boolean {
    return proto3.util.equals(UserAccessRightCreated, a, b);
  }
}

/**
 * Event representing the update of a user's access right association.
 *
 * @generated from message salto.nebula.event.v1.UserAccessRightUpdated
 */
export class UserAccessRightUpdated extends Message<UserAccessRightUpdated> {
  /**
   * Access right's user association updated.
   *
   * @generated from field: salto.nebula.user.v1.User user = 1;
   */
  user?: User;

  /**
   * User's access right association updated.
   *
   * @generated from field: salto.nebula.accessright.v1.AccessRight access_right = 2;
   */
  accessRight?: AccessRight;

  constructor(data?: PartialMessage<UserAccessRightUpdated>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "salto.nebula.event.v1.UserAccessRightUpdated";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user", kind: "message", T: User },
    { no: 2, name: "access_right", kind: "message", T: AccessRight },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserAccessRightUpdated {
    return new UserAccessRightUpdated().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserAccessRightUpdated {
    return new UserAccessRightUpdated().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserAccessRightUpdated {
    return new UserAccessRightUpdated().fromJsonString(jsonString, options);
  }

  static equals(a: UserAccessRightUpdated | PlainMessage<UserAccessRightUpdated> | undefined, b: UserAccessRightUpdated | PlainMessage<UserAccessRightUpdated> | undefined): boolean {
    return proto3.util.equals(UserAccessRightUpdated, a, b);
  }
}

/**
 * Event representing the deletion of a user's access right association.
 *
 * @generated from message salto.nebula.event.v1.UserAccessRightDeleted
 */
export class UserAccessRightDeleted extends Message<UserAccessRightDeleted> {
  /**
   * Access right's user association deleted.
   *
   * @generated from field: salto.nebula.user.v1.User user = 1;
   */
  user?: User;

  /**
   * User's access right association deleted.
   *
   * @generated from field: salto.nebula.accessright.v1.AccessRight access_right = 2;
   */
  accessRight?: AccessRight;

  constructor(data?: PartialMessage<UserAccessRightDeleted>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "salto.nebula.event.v1.UserAccessRightDeleted";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user", kind: "message", T: User },
    { no: 2, name: "access_right", kind: "message", T: AccessRight },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserAccessRightDeleted {
    return new UserAccessRightDeleted().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserAccessRightDeleted {
    return new UserAccessRightDeleted().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserAccessRightDeleted {
    return new UserAccessRightDeleted().fromJsonString(jsonString, options);
  }

  static equals(a: UserAccessRightDeleted | PlainMessage<UserAccessRightDeleted> | undefined, b: UserAccessRightDeleted | PlainMessage<UserAccessRightDeleted> | undefined): boolean {
    return proto3.util.equals(UserAccessRightDeleted, a, b);
  }
}

/**
 * Event representing the assignment of a user's card key.
 *
 * @generated from message salto.nebula.event.v1.CardKeyAssigned
 */
export class CardKeyAssigned extends Message<CardKeyAssigned> {
  /**
   * Card key's user.
   *
   * @generated from field: salto.nebula.user.v1.User user = 1;
   */
  user?: User;

  /**
   * Card key assigned.
   *
   * @generated from field: salto.nebula.user.v1.CardKey card_key = 2;
   */
  cardKey?: CardKey;

  constructor(data?: PartialMessage<CardKeyAssigned>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "salto.nebula.event.v1.CardKeyAssigned";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user", kind: "message", T: User },
    { no: 2, name: "card_key", kind: "message", T: CardKey },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CardKeyAssigned {
    return new CardKeyAssigned().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CardKeyAssigned {
    return new CardKeyAssigned().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CardKeyAssigned {
    return new CardKeyAssigned().fromJsonString(jsonString, options);
  }

  static equals(a: CardKeyAssigned | PlainMessage<CardKeyAssigned> | undefined, b: CardKeyAssigned | PlainMessage<CardKeyAssigned> | undefined): boolean {
    return proto3.util.equals(CardKeyAssigned, a, b);
  }
}

/**
 * Event representing the cancelation of a user's card key.
 *
 * @generated from message salto.nebula.event.v1.CardKeyCanceled
 */
export class CardKeyCanceled extends Message<CardKeyCanceled> {
  /**
   * Card key's user.
   *
   * @generated from field: salto.nebula.user.v1.User user = 1;
   */
  user?: User;

  /**
   * Card key canceled.
   *
   * @generated from field: salto.nebula.user.v1.CardKey card_key = 2;
   */
  cardKey?: CardKey;

  constructor(data?: PartialMessage<CardKeyCanceled>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "salto.nebula.event.v1.CardKeyCanceled";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user", kind: "message", T: User },
    { no: 2, name: "card_key", kind: "message", T: CardKey },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CardKeyCanceled {
    return new CardKeyCanceled().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CardKeyCanceled {
    return new CardKeyCanceled().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CardKeyCanceled {
    return new CardKeyCanceled().fromJsonString(jsonString, options);
  }

  static equals(a: CardKeyCanceled | PlainMessage<CardKeyCanceled> | undefined, b: CardKeyCanceled | PlainMessage<CardKeyCanceled> | undefined): boolean {
    return proto3.util.equals(CardKeyCanceled, a, b);
  }
}

/**
 * Event representing the assignment of a user's app key.
 *
 * @generated from message salto.nebula.event.v1.AppKeyAssigned
 */
export class AppKeyAssigned extends Message<AppKeyAssigned> {
  /**
   * App key's user.
   *
   * @generated from field: salto.nebula.user.v1.User user = 1;
   */
  user?: User;

  /**
   * App key assigned.
   *
   * @generated from field: salto.nebula.user.v1.AppKey app_key = 2;
   */
  appKey?: AppKey;

  constructor(data?: PartialMessage<AppKeyAssigned>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "salto.nebula.event.v1.AppKeyAssigned";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user", kind: "message", T: User },
    { no: 2, name: "app_key", kind: "message", T: AppKey },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AppKeyAssigned {
    return new AppKeyAssigned().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AppKeyAssigned {
    return new AppKeyAssigned().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AppKeyAssigned {
    return new AppKeyAssigned().fromJsonString(jsonString, options);
  }

  static equals(a: AppKeyAssigned | PlainMessage<AppKeyAssigned> | undefined, b: AppKeyAssigned | PlainMessage<AppKeyAssigned> | undefined): boolean {
    return proto3.util.equals(AppKeyAssigned, a, b);
  }
}

/**
 * Event representing the cancelation of a user's app key.
 *
 * @generated from message salto.nebula.event.v1.AppKeyCanceled
 */
export class AppKeyCanceled extends Message<AppKeyCanceled> {
  /**
   * App key's user.
   *
   * @generated from field: salto.nebula.user.v1.User user = 1;
   */
  user?: User;

  /**
   * App key canceled.
   *
   * @generated from field: salto.nebula.user.v1.AppKey app_key = 2;
   */
  appKey?: AppKey;

  constructor(data?: PartialMessage<AppKeyCanceled>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "salto.nebula.event.v1.AppKeyCanceled";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user", kind: "message", T: User },
    { no: 2, name: "app_key", kind: "message", T: AppKey },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AppKeyCanceled {
    return new AppKeyCanceled().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AppKeyCanceled {
    return new AppKeyCanceled().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AppKeyCanceled {
    return new AppKeyCanceled().fromJsonString(jsonString, options);
  }

  static equals(a: AppKeyCanceled | PlainMessage<AppKeyCanceled> | undefined, b: AppKeyCanceled | PlainMessage<AppKeyCanceled> | undefined): boolean {
    return proto3.util.equals(AppKeyCanceled, a, b);
  }
}

/**
 * Event representing the assignment of a user's wallet key.
 *
 * @generated from message salto.nebula.event.v1.WalletKeyAssigned
 */
export class WalletKeyAssigned extends Message<WalletKeyAssigned> {
  /**
   * Wallet key's user.
   *
   * @generated from field: salto.nebula.user.v1.User user = 1;
   */
  user?: User;

  /**
   * Wallet key assigned.
   *
   * @generated from field: salto.nebula.user.v1.WalletKey wallet_key = 2;
   */
  walletKey?: WalletKey;

  constructor(data?: PartialMessage<WalletKeyAssigned>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "salto.nebula.event.v1.WalletKeyAssigned";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user", kind: "message", T: User },
    { no: 2, name: "wallet_key", kind: "message", T: WalletKey },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WalletKeyAssigned {
    return new WalletKeyAssigned().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WalletKeyAssigned {
    return new WalletKeyAssigned().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WalletKeyAssigned {
    return new WalletKeyAssigned().fromJsonString(jsonString, options);
  }

  static equals(a: WalletKeyAssigned | PlainMessage<WalletKeyAssigned> | undefined, b: WalletKeyAssigned | PlainMessage<WalletKeyAssigned> | undefined): boolean {
    return proto3.util.equals(WalletKeyAssigned, a, b);
  }
}

/**
 * Event representing the cancelation of a user's wallet key.
 *
 * @generated from message salto.nebula.event.v1.WalletKeyCanceled
 */
export class WalletKeyCanceled extends Message<WalletKeyCanceled> {
  /**
   * Wallet key's user.
   *
   * @generated from field: salto.nebula.user.v1.User user = 1;
   */
  user?: User;

  /**
   * Wallet key canceled.
   *
   * @generated from field: salto.nebula.user.v1.WalletKey wallet_key = 2;
   */
  walletKey?: WalletKey;

  constructor(data?: PartialMessage<WalletKeyCanceled>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "salto.nebula.event.v1.WalletKeyCanceled";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user", kind: "message", T: User },
    { no: 2, name: "wallet_key", kind: "message", T: WalletKey },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WalletKeyCanceled {
    return new WalletKeyCanceled().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WalletKeyCanceled {
    return new WalletKeyCanceled().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WalletKeyCanceled {
    return new WalletKeyCanceled().fromJsonString(jsonString, options);
  }

  static equals(a: WalletKeyCanceled | PlainMessage<WalletKeyCanceled> | undefined, b: WalletKeyCanceled | PlainMessage<WalletKeyCanceled> | undefined): boolean {
    return proto3.util.equals(WalletKeyCanceled, a, b);
  }
}

/**
 * Event representing the move in of a unit.
 *
 * @generated from message salto.nebula.event.v1.UnitMovedIn
 */
export class UnitMovedIn extends Message<UnitMovedIn> {
  /**
   * Unit moved in.
   *
   * @generated from field: salto.nebula.unit.v1.Unit unit = 1;
   */
  unit?: Unit;

  constructor(data?: PartialMessage<UnitMovedIn>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "salto.nebula.event.v1.UnitMovedIn";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "unit", kind: "message", T: Unit },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UnitMovedIn {
    return new UnitMovedIn().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UnitMovedIn {
    return new UnitMovedIn().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UnitMovedIn {
    return new UnitMovedIn().fromJsonString(jsonString, options);
  }

  static equals(a: UnitMovedIn | PlainMessage<UnitMovedIn> | undefined, b: UnitMovedIn | PlainMessage<UnitMovedIn> | undefined): boolean {
    return proto3.util.equals(UnitMovedIn, a, b);
  }
}

/**
 * Event representing the move out of a unit.
 *
 * @generated from message salto.nebula.event.v1.UnitMovedOut
 */
export class UnitMovedOut extends Message<UnitMovedOut> {
  /**
   * Unit moved out.
   *
   * @generated from field: salto.nebula.unit.v1.Unit unit = 1;
   */
  unit?: Unit;

  constructor(data?: PartialMessage<UnitMovedOut>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "salto.nebula.event.v1.UnitMovedOut";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "unit", kind: "message", T: Unit },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UnitMovedOut {
    return new UnitMovedOut().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UnitMovedOut {
    return new UnitMovedOut().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UnitMovedOut {
    return new UnitMovedOut().fromJsonString(jsonString, options);
  }

  static equals(a: UnitMovedOut | PlainMessage<UnitMovedOut> | undefined, b: UnitMovedOut | PlainMessage<UnitMovedOut> | undefined): boolean {
    return proto3.util.equals(UnitMovedOut, a, b);
  }
}

/**
 * Event representing the creation of a unit.
 *
 * @generated from message salto.nebula.event.v1.UnitCreated
 */
export class UnitCreated extends Message<UnitCreated> {
  /**
   * Unit created.
   *
   * @generated from field: salto.nebula.unit.v1.Unit unit = 1;
   */
  unit?: Unit;

  constructor(data?: PartialMessage<UnitCreated>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "salto.nebula.event.v1.UnitCreated";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "unit", kind: "message", T: Unit },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UnitCreated {
    return new UnitCreated().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UnitCreated {
    return new UnitCreated().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UnitCreated {
    return new UnitCreated().fromJsonString(jsonString, options);
  }

  static equals(a: UnitCreated | PlainMessage<UnitCreated> | undefined, b: UnitCreated | PlainMessage<UnitCreated> | undefined): boolean {
    return proto3.util.equals(UnitCreated, a, b);
  }
}

/**
 * Event representing the update of a unit.
 *
 * @generated from message salto.nebula.event.v1.UnitUpdated
 */
export class UnitUpdated extends Message<UnitUpdated> {
  /**
   * Unit updated.
   *
   * @generated from field: salto.nebula.unit.v1.Unit unit = 1;
   */
  unit?: Unit;

  constructor(data?: PartialMessage<UnitUpdated>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "salto.nebula.event.v1.UnitUpdated";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "unit", kind: "message", T: Unit },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UnitUpdated {
    return new UnitUpdated().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UnitUpdated {
    return new UnitUpdated().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UnitUpdated {
    return new UnitUpdated().fromJsonString(jsonString, options);
  }

  static equals(a: UnitUpdated | PlainMessage<UnitUpdated> | undefined, b: UnitUpdated | PlainMessage<UnitUpdated> | undefined): boolean {
    return proto3.util.equals(UnitUpdated, a, b);
  }
}

/**
 * Event representing the deletion of a unit.
 *
 * @generated from message salto.nebula.event.v1.UnitDeleted
 */
export class UnitDeleted extends Message<UnitDeleted> {
  /**
   * Unit deleted.
   *
   * @generated from field: salto.nebula.unit.v1.Unit unit = 1;
   */
  unit?: Unit;

  constructor(data?: PartialMessage<UnitDeleted>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "salto.nebula.event.v1.UnitDeleted";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "unit", kind: "message", T: Unit },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UnitDeleted {
    return new UnitDeleted().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UnitDeleted {
    return new UnitDeleted().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UnitDeleted {
    return new UnitDeleted().fromJsonString(jsonString, options);
  }

  static equals(a: UnitDeleted | PlainMessage<UnitDeleted> | undefined, b: UnitDeleted | PlainMessage<UnitDeleted> | undefined): boolean {
    return proto3.util.equals(UnitDeleted, a, b);
  }
}

/**
 * Event representing the creation of an emergency key.
 *
 * @generated from message salto.nebula.event.v1.EmergencyKeyCreated
 */
export class EmergencyKeyCreated extends Message<EmergencyKeyCreated> {
  /**
   * Emergency key created.
   *
   * @generated from field: salto.nebula.emergencykey.v1.EmergencyKey emergency_key = 1;
   */
  emergencyKey?: EmergencyKey;

  constructor(data?: PartialMessage<EmergencyKeyCreated>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "salto.nebula.event.v1.EmergencyKeyCreated";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "emergency_key", kind: "message", T: EmergencyKey },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EmergencyKeyCreated {
    return new EmergencyKeyCreated().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EmergencyKeyCreated {
    return new EmergencyKeyCreated().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EmergencyKeyCreated {
    return new EmergencyKeyCreated().fromJsonString(jsonString, options);
  }

  static equals(a: EmergencyKeyCreated | PlainMessage<EmergencyKeyCreated> | undefined, b: EmergencyKeyCreated | PlainMessage<EmergencyKeyCreated> | undefined): boolean {
    return proto3.util.equals(EmergencyKeyCreated, a, b);
  }
}

/**
 * Event representing the update of an emergency key.
 *
 * @generated from message salto.nebula.event.v1.EmergencyKeyUpdated
 */
export class EmergencyKeyUpdated extends Message<EmergencyKeyUpdated> {
  /**
   * Emergency key updated.
   *
   * @generated from field: salto.nebula.emergencykey.v1.EmergencyKey emergency_key = 1;
   */
  emergencyKey?: EmergencyKey;

  constructor(data?: PartialMessage<EmergencyKeyUpdated>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "salto.nebula.event.v1.EmergencyKeyUpdated";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "emergency_key", kind: "message", T: EmergencyKey },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EmergencyKeyUpdated {
    return new EmergencyKeyUpdated().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EmergencyKeyUpdated {
    return new EmergencyKeyUpdated().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EmergencyKeyUpdated {
    return new EmergencyKeyUpdated().fromJsonString(jsonString, options);
  }

  static equals(a: EmergencyKeyUpdated | PlainMessage<EmergencyKeyUpdated> | undefined, b: EmergencyKeyUpdated | PlainMessage<EmergencyKeyUpdated> | undefined): boolean {
    return proto3.util.equals(EmergencyKeyUpdated, a, b);
  }
}

/**
 * Event representing the deletion of an emergency key.
 *
 * @generated from message salto.nebula.event.v1.EmergencyKeyDeleted
 */
export class EmergencyKeyDeleted extends Message<EmergencyKeyDeleted> {
  /**
   * Emergency key deleted.
   *
   * @generated from field: salto.nebula.emergencykey.v1.EmergencyKey emergency_key = 1;
   */
  emergencyKey?: EmergencyKey;

  constructor(data?: PartialMessage<EmergencyKeyDeleted>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "salto.nebula.event.v1.EmergencyKeyDeleted";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "emergency_key", kind: "message", T: EmergencyKey },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EmergencyKeyDeleted {
    return new EmergencyKeyDeleted().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EmergencyKeyDeleted {
    return new EmergencyKeyDeleted().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EmergencyKeyDeleted {
    return new EmergencyKeyDeleted().fromJsonString(jsonString, options);
  }

  static equals(a: EmergencyKeyDeleted | PlainMessage<EmergencyKeyDeleted> | undefined, b: EmergencyKeyDeleted | PlainMessage<EmergencyKeyDeleted> | undefined): boolean {
    return proto3.util.equals(EmergencyKeyDeleted, a, b);
  }
}

/**
 * Event representing the assignment of a user's electronic key.
 *
 * @generated from message salto.nebula.event.v1.ElectronicKeyAssigned
 */
export class ElectronicKeyAssigned extends Message<ElectronicKeyAssigned> {
  /**
   * Electronic key's user.
   *
   * @generated from field: salto.nebula.user.v1.User user = 1;
   */
  user?: User;

  /**
   * Electronic key assigned.
   *
   * @generated from field: salto.nebula.user.v1.ElectronicKey electronic_key = 2;
   */
  electronicKey?: ElectronicKey;

  constructor(data?: PartialMessage<ElectronicKeyAssigned>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "salto.nebula.event.v1.ElectronicKeyAssigned";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user", kind: "message", T: User },
    { no: 2, name: "electronic_key", kind: "message", T: ElectronicKey },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ElectronicKeyAssigned {
    return new ElectronicKeyAssigned().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ElectronicKeyAssigned {
    return new ElectronicKeyAssigned().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ElectronicKeyAssigned {
    return new ElectronicKeyAssigned().fromJsonString(jsonString, options);
  }

  static equals(a: ElectronicKeyAssigned | PlainMessage<ElectronicKeyAssigned> | undefined, b: ElectronicKeyAssigned | PlainMessage<ElectronicKeyAssigned> | undefined): boolean {
    return proto3.util.equals(ElectronicKeyAssigned, a, b);
  }
}

/**
 * Event representing the cancelation of a user's electronic key.
 *
 * @generated from message salto.nebula.event.v1.ElectronicKeyCanceled
 */
export class ElectronicKeyCanceled extends Message<ElectronicKeyCanceled> {
  /**
   * Electronic key's user.
   *
   * @generated from field: salto.nebula.user.v1.User user = 1;
   */
  user?: User;

  /**
   * Electronic key canceled.
   *
   * @generated from field: salto.nebula.user.v1.ElectronicKey electronic_key = 2;
   */
  electronicKey?: ElectronicKey;

  constructor(data?: PartialMessage<ElectronicKeyCanceled>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "salto.nebula.event.v1.ElectronicKeyCanceled";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user", kind: "message", T: User },
    { no: 2, name: "electronic_key", kind: "message", T: ElectronicKey },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ElectronicKeyCanceled {
    return new ElectronicKeyCanceled().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ElectronicKeyCanceled {
    return new ElectronicKeyCanceled().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ElectronicKeyCanceled {
    return new ElectronicKeyCanceled().fromJsonString(jsonString, options);
  }

  static equals(a: ElectronicKeyCanceled | PlainMessage<ElectronicKeyCanceled> | undefined, b: ElectronicKeyCanceled | PlainMessage<ElectronicKeyCanceled> | undefined): boolean {
    return proto3.util.equals(ElectronicKeyCanceled, a, b);
  }
}

