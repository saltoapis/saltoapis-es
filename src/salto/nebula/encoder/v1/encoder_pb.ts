// @generated by protoc-gen-es v1.3.1 with parameter "target=ts,import_extension=none"
// @generated from file salto/nebula/encoder/v1/encoder.proto (package salto.nebula.encoder.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { FieldMask, Message, proto3, Timestamp } from "@bufbuild/protobuf";

/**
 * The encoder object
 *
 * @generated from message salto.nebula.encoder.v1.Encoder
 */
export class Encoder extends Message<Encoder> {
  /**
   * Output only. Resource name of the encoder. It must have the format of
   * `installations/*\/encoders/*`. For example:
   * `installations/surelock-homes-hq/encoders/dancing-men`.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * Display name of the encoder.
   *
   * @generated from field: string display_name = 2;
   */
  displayName = "";

  /**
   * Globally unique identifier that is used across all devices manufactured
   * by SALTO, including gateways, extenders, encoders and so on.
   *
   * @generated from field: optional string device_id = 3;
   */
  deviceId?: string;

  /**
   * Parent device name, could be a `Gateway` or an `Extender` and takes the
   * form of a relative resource name:
   * `installations/surelock-homes-hq/gateways/conan-doyle` or
   * `installations/surelock-homes-hq/extenders/elementary`.
   *
   * @generated from oneof salto.nebula.encoder.v1.Encoder.parent_device
   */
  parentDevice: {
    /**
     * Parent name, when encoder is connected to a gateway
     *
     * @generated from field: string gateway = 4;
     */
    value: string;
    case: "gateway";
  } | {
    /**
     * Parent name, when encoder is connected to an extender
     *
     * @generated from field: string extender = 5;
     */
    value: string;
    case: "extender";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * Indicates whether this encoder has been initialized or not. This
   * field cannot be modified using a standard
   * [`UpdateEncoder`][salto.nebula.encoder.v1.EncoderService.UpdateEncoder]
   * operation. To change the value of this field, you must call
   * [`InitializeEncoder`][salto.nebula.encoder.v1.EncoderService.InitializeEncoder].
   *
   * If the value is `false` also applies to the case where the
   * initialization process has been initiated but where it has not finished.
   *
   * @generated from field: bool initialized = 6;
   */
  initialized = false;

  /**
   * Indicates whether this encoder is connected or not. It's considered
   * connected if there has been at least one communication with it within the
   * last 10 minutes.
   *
   * @generated from field: bool connected = 7;
   */
  connected = false;

  /**
   * The last time an event was received.
   *
   * @generated from field: google.protobuf.Timestamp last_event_time = 8;
   */
  lastEventTime?: Timestamp;

  /**
   * Indicates whether this encoder has pending updates or not. This could be
   * because there was a pending configuration or a firmware update and is
   * conditionally set based on the current installation settings.
   *
   * @generated from field: bool outdated = 9;
   */
  outdated = false;

  /**
   * Disables the sound emitted by the encoder during operation.
   *
   * @generated from field: bool disable_sound = 10;
   */
  disableSound = false;

  constructor(data?: PartialMessage<Encoder>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "salto.nebula.encoder.v1.Encoder";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "display_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "device_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "gateway", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "parent_device" },
    { no: 5, name: "extender", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "parent_device" },
    { no: 6, name: "initialized", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "connected", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 8, name: "last_event_time", kind: "message", T: Timestamp },
    { no: 9, name: "outdated", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 10, name: "disable_sound", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Encoder {
    return new Encoder().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Encoder {
    return new Encoder().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Encoder {
    return new Encoder().fromJsonString(jsonString, options);
  }

  static equals(a: Encoder | PlainMessage<Encoder> | undefined, b: Encoder | PlainMessage<Encoder> | undefined): boolean {
    return proto3.util.equals(Encoder, a, b);
  }
}

/**
 * The request message for [CreateEncoder][salto.nebula.encoder.v1.EncoderService.CreateEncoder]
 *
 * @generated from message salto.nebula.encoder.v1.CreateEncoderRequest
 */
export class CreateEncoderRequest extends Message<CreateEncoderRequest> {
  /**
   * Resource name of the parent resource where to create the encoder. For
   * example, `installations/surelock-homes-hq`.
   *
   * @generated from field: string parent = 1;
   */
  parent = "";

  /**
   * The encoder ID to use for this encoder. In case it's empty the
   * server will autogenerate a unique identifier.
   *
   * @generated from field: optional string encoder_id = 2;
   */
  encoderId?: string;

  /**
   * The encoder resource to be created. Client must not set the
   * `Encoder.name` field.
   *
   * @generated from field: salto.nebula.encoder.v1.Encoder encoder = 3;
   */
  encoder?: Encoder;

  constructor(data?: PartialMessage<CreateEncoderRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "salto.nebula.encoder.v1.CreateEncoderRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "parent", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "encoder_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "encoder", kind: "message", T: Encoder },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateEncoderRequest {
    return new CreateEncoderRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateEncoderRequest {
    return new CreateEncoderRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateEncoderRequest {
    return new CreateEncoderRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateEncoderRequest | PlainMessage<CreateEncoderRequest> | undefined, b: CreateEncoderRequest | PlainMessage<CreateEncoderRequest> | undefined): boolean {
    return proto3.util.equals(CreateEncoderRequest, a, b);
  }
}

/**
 * The request message for [GetEncoder][salto.nebula.encoder.v1.EncoderService.GetEncoder]
 *
 * @generated from message salto.nebula.encoder.v1.GetEncoderRequest
 */
export class GetEncoderRequest extends Message<GetEncoderRequest> {
  /**
   * The name of the requested encoder resource. For example:
   * `installations/surelock-homes-hq/encoders/dancing-men`.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<GetEncoderRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "salto.nebula.encoder.v1.GetEncoderRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetEncoderRequest {
    return new GetEncoderRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetEncoderRequest {
    return new GetEncoderRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetEncoderRequest {
    return new GetEncoderRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetEncoderRequest | PlainMessage<GetEncoderRequest> | undefined, b: GetEncoderRequest | PlainMessage<GetEncoderRequest> | undefined): boolean {
    return proto3.util.equals(GetEncoderRequest, a, b);
  }
}

/**
 * The request message for [ListEncoders][salto.nebula.encoder.v1.EncoderService.ListEncoders]
 *
 * @generated from message salto.nebula.encoder.v1.ListEncodersRequest
 */
export class ListEncodersRequest extends Message<ListEncodersRequest> {
  /**
   * The parent resource name. For example, `installations/surelock-homes-hq`.
   *
   * @generated from field: string parent = 1;
   */
  parent = "";

  /**
   * The maximum number of items to return.
   *
   * @generated from field: int32 page_size = 2;
   */
  pageSize = 0;

  /**
   * The `next_page_token` value returned from a previous `List` request, if
   * any.
   *
   * @generated from field: string page_token = 3;
   */
  pageToken = "";

  /**
   * A filter that chooses which encoders to return.
   *
   * @generated from field: string filter = 4;
   */
  filter = "";

  /**
   * How the results should be sorted.
   *
   * @generated from field: string order_by = 5;
   */
  orderBy = "";

  constructor(data?: PartialMessage<ListEncodersRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "salto.nebula.encoder.v1.ListEncodersRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "parent", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "page_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "filter", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "order_by", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListEncodersRequest {
    return new ListEncodersRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListEncodersRequest {
    return new ListEncodersRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListEncodersRequest {
    return new ListEncodersRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListEncodersRequest | PlainMessage<ListEncodersRequest> | undefined, b: ListEncodersRequest | PlainMessage<ListEncodersRequest> | undefined): boolean {
    return proto3.util.equals(ListEncodersRequest, a, b);
  }
}

/**
 * The response message for [ListEncoders][salto.nebula.encoder.v1.EncoderService.ListEncoders]
 *
 * @generated from message salto.nebula.encoder.v1.ListEncodersResponse
 */
export class ListEncodersResponse extends Message<ListEncodersResponse> {
  /**
   * The field name should match the noun `encoders` in the method name. There
   * will be a maximum number of items returned based on the `page_size` field
   * in the request.
   *
   * @generated from field: repeated salto.nebula.encoder.v1.Encoder encoders = 1;
   */
  encoders: Encoder[] = [];

  /**
   * Token to retrieve the next page of results, or empty if there are no more
   * results in the list.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListEncodersResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "salto.nebula.encoder.v1.ListEncodersResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "encoders", kind: "message", T: Encoder, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListEncodersResponse {
    return new ListEncodersResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListEncodersResponse {
    return new ListEncodersResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListEncodersResponse {
    return new ListEncodersResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListEncodersResponse | PlainMessage<ListEncodersResponse> | undefined, b: ListEncodersResponse | PlainMessage<ListEncodersResponse> | undefined): boolean {
    return proto3.util.equals(ListEncodersResponse, a, b);
  }
}

/**
 * The request message for [UpdateEncoder][salto.nebula.encoder.v1.EncoderService.UpdateEncoder]
 *
 * @generated from message salto.nebula.encoder.v1.UpdateEncoderRequest
 */
export class UpdateEncoderRequest extends Message<UpdateEncoderRequest> {
  /**
   * The encoder resource which replaces the resource on the server.
   *
   * @generated from field: salto.nebula.encoder.v1.Encoder encoder = 1;
   */
  encoder?: Encoder;

  /**
   * The update mask applied to the resource.
   *
   * @generated from field: google.protobuf.FieldMask update_mask = 2;
   */
  updateMask?: FieldMask;

  constructor(data?: PartialMessage<UpdateEncoderRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "salto.nebula.encoder.v1.UpdateEncoderRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "encoder", kind: "message", T: Encoder },
    { no: 2, name: "update_mask", kind: "message", T: FieldMask },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateEncoderRequest {
    return new UpdateEncoderRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateEncoderRequest {
    return new UpdateEncoderRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateEncoderRequest {
    return new UpdateEncoderRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateEncoderRequest | PlainMessage<UpdateEncoderRequest> | undefined, b: UpdateEncoderRequest | PlainMessage<UpdateEncoderRequest> | undefined): boolean {
    return proto3.util.equals(UpdateEncoderRequest, a, b);
  }
}

/**
 * The request message for [DeleteEncoder][salto.nebula.encoder.v1.EncoderService.DeleteEncoder]
 *
 * @generated from message salto.nebula.encoder.v1.DeleteEncoderRequest
 */
export class DeleteEncoderRequest extends Message<DeleteEncoderRequest> {
  /**
   * The resource name of the encoder to be deleted. For example:
   * `installations/surelock-homes-hq/encoders/dancing-men`.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<DeleteEncoderRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "salto.nebula.encoder.v1.DeleteEncoderRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteEncoderRequest {
    return new DeleteEncoderRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteEncoderRequest {
    return new DeleteEncoderRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteEncoderRequest {
    return new DeleteEncoderRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteEncoderRequest | PlainMessage<DeleteEncoderRequest> | undefined, b: DeleteEncoderRequest | PlainMessage<DeleteEncoderRequest> | undefined): boolean {
    return proto3.util.equals(DeleteEncoderRequest, a, b);
  }
}

/**
 * The request message for [`BindEncoder`][salto.nebula.encoder.v1.EncoderService.BindEncoder]
 *
 * @generated from message salto.nebula.encoder.v1.BindEncoderRequest
 */
export class BindEncoderRequest extends Message<BindEncoderRequest> {
  /**
   * The resource name of the encoder to be bound. For example:
   * `installations/surelock-homes-hq/encoders/baker-street-entrance`.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * Globally unique identifier that is used across all devices manufactured
   * by SALTO, including gateways, extenders, electronic locks and so on.
   *
   * @generated from field: string device_id = 2;
   */
  deviceId = "";

  constructor(data?: PartialMessage<BindEncoderRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "salto.nebula.encoder.v1.BindEncoderRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "device_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BindEncoderRequest {
    return new BindEncoderRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BindEncoderRequest {
    return new BindEncoderRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BindEncoderRequest {
    return new BindEncoderRequest().fromJsonString(jsonString, options);
  }

  static equals(a: BindEncoderRequest | PlainMessage<BindEncoderRequest> | undefined, b: BindEncoderRequest | PlainMessage<BindEncoderRequest> | undefined): boolean {
    return proto3.util.equals(BindEncoderRequest, a, b);
  }
}

/**
 * The empty response message for [`BindEncoder`][salto.nebula.encoder.v1.EncoderService.BindEncoder]
 *
 * @generated from message salto.nebula.encoder.v1.BindEncoderResponse
 */
export class BindEncoderResponse extends Message<BindEncoderResponse> {
  constructor(data?: PartialMessage<BindEncoderResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "salto.nebula.encoder.v1.BindEncoderResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BindEncoderResponse {
    return new BindEncoderResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BindEncoderResponse {
    return new BindEncoderResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BindEncoderResponse {
    return new BindEncoderResponse().fromJsonString(jsonString, options);
  }

  static equals(a: BindEncoderResponse | PlainMessage<BindEncoderResponse> | undefined, b: BindEncoderResponse | PlainMessage<BindEncoderResponse> | undefined): boolean {
    return proto3.util.equals(BindEncoderResponse, a, b);
  }
}

/**
 * The request message for [`UnbindEncoder`][salto.nebula.enconder.v1.EncoderService.UnbindEncoder]
 *
 * @generated from message salto.nebula.encoder.v1.UnbindEncoderRequest
 */
export class UnbindEncoderRequest extends Message<UnbindEncoderRequest> {
  /**
   * The resource name of the encoder to be unbound. For example:
   * `installations/surelock-homes-hq/encoders/baker-street-entrance`.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * If set to true, the device identifier is removed (unbound) from the
   * encoder. Otherwise, the request will only work if the encoder
   * isn't bound to any previous device identifier.
   *
   * @generated from field: bool force = 2;
   */
  force = false;

  constructor(data?: PartialMessage<UnbindEncoderRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "salto.nebula.encoder.v1.UnbindEncoderRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "force", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UnbindEncoderRequest {
    return new UnbindEncoderRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UnbindEncoderRequest {
    return new UnbindEncoderRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UnbindEncoderRequest {
    return new UnbindEncoderRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UnbindEncoderRequest | PlainMessage<UnbindEncoderRequest> | undefined, b: UnbindEncoderRequest | PlainMessage<UnbindEncoderRequest> | undefined): boolean {
    return proto3.util.equals(UnbindEncoderRequest, a, b);
  }
}

/**
 * The empty response message for [`UnbindEnconder`][salto.nebula.enconder.v1.EncoderService.UnbindEnconder]
 *
 * @generated from message salto.nebula.encoder.v1.UnbindEncoderResponse
 */
export class UnbindEncoderResponse extends Message<UnbindEncoderResponse> {
  constructor(data?: PartialMessage<UnbindEncoderResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "salto.nebula.encoder.v1.UnbindEncoderResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UnbindEncoderResponse {
    return new UnbindEncoderResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UnbindEncoderResponse {
    return new UnbindEncoderResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UnbindEncoderResponse {
    return new UnbindEncoderResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UnbindEncoderResponse | PlainMessage<UnbindEncoderResponse> | undefined, b: UnbindEncoderResponse | PlainMessage<UnbindEncoderResponse> | undefined): boolean {
    return proto3.util.equals(UnbindEncoderResponse, a, b);
  }
}

/**
 * The request message for [`InitializeEncoder`][salto.nebula.encoder.v1.EncoderService.InitializeEncoder]
 *
 * @generated from message salto.nebula.encoder.v1.InitializeEncoderRequest
 */
export class InitializeEncoderRequest extends Message<InitializeEncoderRequest> {
  /**
   * The resource name of the encoder to be initialized. For example:
   * `installations/surelock-homes-hq/encoders/conan-doyle`.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<InitializeEncoderRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "salto.nebula.encoder.v1.InitializeEncoderRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InitializeEncoderRequest {
    return new InitializeEncoderRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InitializeEncoderRequest {
    return new InitializeEncoderRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InitializeEncoderRequest {
    return new InitializeEncoderRequest().fromJsonString(jsonString, options);
  }

  static equals(a: InitializeEncoderRequest | PlainMessage<InitializeEncoderRequest> | undefined, b: InitializeEncoderRequest | PlainMessage<InitializeEncoderRequest> | undefined): boolean {
    return proto3.util.equals(InitializeEncoderRequest, a, b);
  }
}

/**
 * The empty response message for [`InitializeEncoder`][salto.nebula.encoder.v1.EncoderService.InitializeEncoder]
 *
 * @generated from message salto.nebula.encoder.v1.InitializeEncoderResponse
 */
export class InitializeEncoderResponse extends Message<InitializeEncoderResponse> {
  constructor(data?: PartialMessage<InitializeEncoderResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "salto.nebula.encoder.v1.InitializeEncoderResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InitializeEncoderResponse {
    return new InitializeEncoderResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InitializeEncoderResponse {
    return new InitializeEncoderResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InitializeEncoderResponse {
    return new InitializeEncoderResponse().fromJsonString(jsonString, options);
  }

  static equals(a: InitializeEncoderResponse | PlainMessage<InitializeEncoderResponse> | undefined, b: InitializeEncoderResponse | PlainMessage<InitializeEncoderResponse> | undefined): boolean {
    return proto3.util.equals(InitializeEncoderResponse, a, b);
  }
}

/**
 * The metadata message for [`InitializeEncoder`][salto.nebula.encoder.v1.EncoderService.InitializeEncoder]
 *
 * @generated from message salto.nebula.encoder.v1.InitializeEncoderMetadata
 */
export class InitializeEncoderMetadata extends Message<InitializeEncoderMetadata> {
  constructor(data?: PartialMessage<InitializeEncoderMetadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "salto.nebula.encoder.v1.InitializeEncoderMetadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InitializeEncoderMetadata {
    return new InitializeEncoderMetadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InitializeEncoderMetadata {
    return new InitializeEncoderMetadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InitializeEncoderMetadata {
    return new InitializeEncoderMetadata().fromJsonString(jsonString, options);
  }

  static equals(a: InitializeEncoderMetadata | PlainMessage<InitializeEncoderMetadata> | undefined, b: InitializeEncoderMetadata | PlainMessage<InitializeEncoderMetadata> | undefined): boolean {
    return proto3.util.equals(InitializeEncoderMetadata, a, b);
  }
}

/**
 * The request message for [`ConfigureEncoder`][salto.nebula.encoder.v1.EncoderService.ConfigureEncoder]
 *
 * @generated from message salto.nebula.encoder.v1.ConfigureEncoderRequest
 */
export class ConfigureEncoderRequest extends Message<ConfigureEncoderRequest> {
  /**
   * The resource name of the encoder to be configured. For example:
   * `installations/surelock-homes-hq/encoders/conan-doyle`.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<ConfigureEncoderRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "salto.nebula.encoder.v1.ConfigureEncoderRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConfigureEncoderRequest {
    return new ConfigureEncoderRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConfigureEncoderRequest {
    return new ConfigureEncoderRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConfigureEncoderRequest {
    return new ConfigureEncoderRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ConfigureEncoderRequest | PlainMessage<ConfigureEncoderRequest> | undefined, b: ConfigureEncoderRequest | PlainMessage<ConfigureEncoderRequest> | undefined): boolean {
    return proto3.util.equals(ConfigureEncoderRequest, a, b);
  }
}

/**
 * The empty response message for [`ConfigureEncoder`][salto.nebula.encoder.v1.EncoderService.ConfigureEncoder]
 *
 * @generated from message salto.nebula.encoder.v1.ConfigureEncoderResponse
 */
export class ConfigureEncoderResponse extends Message<ConfigureEncoderResponse> {
  constructor(data?: PartialMessage<ConfigureEncoderResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "salto.nebula.encoder.v1.ConfigureEncoderResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConfigureEncoderResponse {
    return new ConfigureEncoderResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConfigureEncoderResponse {
    return new ConfigureEncoderResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConfigureEncoderResponse {
    return new ConfigureEncoderResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ConfigureEncoderResponse | PlainMessage<ConfigureEncoderResponse> | undefined, b: ConfigureEncoderResponse | PlainMessage<ConfigureEncoderResponse> | undefined): boolean {
    return proto3.util.equals(ConfigureEncoderResponse, a, b);
  }
}

/**
 * The metadata message for [`ConfigureEncoder`][salto.nebula.encoder.v1.EncoderService.ConfigureEncoder]
 *
 * @generated from message salto.nebula.encoder.v1.ConfigureEncoderMetadata
 */
export class ConfigureEncoderMetadata extends Message<ConfigureEncoderMetadata> {
  constructor(data?: PartialMessage<ConfigureEncoderMetadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "salto.nebula.encoder.v1.ConfigureEncoderMetadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConfigureEncoderMetadata {
    return new ConfigureEncoderMetadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConfigureEncoderMetadata {
    return new ConfigureEncoderMetadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConfigureEncoderMetadata {
    return new ConfigureEncoderMetadata().fromJsonString(jsonString, options);
  }

  static equals(a: ConfigureEncoderMetadata | PlainMessage<ConfigureEncoderMetadata> | undefined, b: ConfigureEncoderMetadata | PlainMessage<ConfigureEncoderMetadata> | undefined): boolean {
    return proto3.util.equals(ConfigureEncoderMetadata, a, b);
  }
}

/**
 * The request message for [`ResetEncoder`][salto.nebula.encoder.v1.EncoderService.ResetEncoder]
 *
 * @generated from message salto.nebula.encoder.v1.ResetEncoderRequest
 */
export class ResetEncoderRequest extends Message<ResetEncoderRequest> {
  /**
   * The resource name of the encoder to be reset. For example:
   * `installations/surelock-homes-hq/encoders/conan-doyle`.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<ResetEncoderRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "salto.nebula.encoder.v1.ResetEncoderRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResetEncoderRequest {
    return new ResetEncoderRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResetEncoderRequest {
    return new ResetEncoderRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResetEncoderRequest {
    return new ResetEncoderRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ResetEncoderRequest | PlainMessage<ResetEncoderRequest> | undefined, b: ResetEncoderRequest | PlainMessage<ResetEncoderRequest> | undefined): boolean {
    return proto3.util.equals(ResetEncoderRequest, a, b);
  }
}

/**
 * The empty response message for [`ResetEncoder`][salto.nebula.encoder.v1.EncoderService.ResetEncoder]
 *
 * @generated from message salto.nebula.encoder.v1.ResetEncoderResponse
 */
export class ResetEncoderResponse extends Message<ResetEncoderResponse> {
  constructor(data?: PartialMessage<ResetEncoderResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "salto.nebula.encoder.v1.ResetEncoderResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResetEncoderResponse {
    return new ResetEncoderResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResetEncoderResponse {
    return new ResetEncoderResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResetEncoderResponse {
    return new ResetEncoderResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ResetEncoderResponse | PlainMessage<ResetEncoderResponse> | undefined, b: ResetEncoderResponse | PlainMessage<ResetEncoderResponse> | undefined): boolean {
    return proto3.util.equals(ResetEncoderResponse, a, b);
  }
}

/**
 * The metadata message for [`ResetEncoder`][salto.nebula.encoder.v1.EncoderService.ResetEncoder]
 *
 * @generated from message salto.nebula.encoder.v1.ResetEncoderMetadata
 */
export class ResetEncoderMetadata extends Message<ResetEncoderMetadata> {
  constructor(data?: PartialMessage<ResetEncoderMetadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "salto.nebula.encoder.v1.ResetEncoderMetadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResetEncoderMetadata {
    return new ResetEncoderMetadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResetEncoderMetadata {
    return new ResetEncoderMetadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResetEncoderMetadata {
    return new ResetEncoderMetadata().fromJsonString(jsonString, options);
  }

  static equals(a: ResetEncoderMetadata | PlainMessage<ResetEncoderMetadata> | undefined, b: ResetEncoderMetadata | PlainMessage<ResetEncoderMetadata> | undefined): boolean {
    return proto3.util.equals(ResetEncoderMetadata, a, b);
  }
}

/**
 * The request message for [`UpdateEncoderFirmware`][salto.nebula.encoder.v1.EncoderService.UpdateEncoderFirmware]
 *
 * @generated from message salto.nebula.encoder.v1.UpdateEncoderFirmwareRequest
 */
export class UpdateEncoderFirmwareRequest extends Message<UpdateEncoderFirmwareRequest> {
  /**
   * The resource name of the encoder whose firmware will be updated. For
   * example:
   * `installations/surelock-homes-hq/encoders/conan-doyle`.
   *
   * @generated from field: string encoder = 1;
   */
  encoder = "";

  constructor(data?: PartialMessage<UpdateEncoderFirmwareRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "salto.nebula.encoder.v1.UpdateEncoderFirmwareRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "encoder", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateEncoderFirmwareRequest {
    return new UpdateEncoderFirmwareRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateEncoderFirmwareRequest {
    return new UpdateEncoderFirmwareRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateEncoderFirmwareRequest {
    return new UpdateEncoderFirmwareRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateEncoderFirmwareRequest | PlainMessage<UpdateEncoderFirmwareRequest> | undefined, b: UpdateEncoderFirmwareRequest | PlainMessage<UpdateEncoderFirmwareRequest> | undefined): boolean {
    return proto3.util.equals(UpdateEncoderFirmwareRequest, a, b);
  }
}

/**
 * The empty response message for [`UpdateEncoderFirmware`][salto.nebula.encoder.v1.EncoderService.UpdateEncoderFirmware]
 *
 * @generated from message salto.nebula.encoder.v1.UpdateEncoderFirmwareResponse
 */
export class UpdateEncoderFirmwareResponse extends Message<UpdateEncoderFirmwareResponse> {
  constructor(data?: PartialMessage<UpdateEncoderFirmwareResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "salto.nebula.encoder.v1.UpdateEncoderFirmwareResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateEncoderFirmwareResponse {
    return new UpdateEncoderFirmwareResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateEncoderFirmwareResponse {
    return new UpdateEncoderFirmwareResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateEncoderFirmwareResponse {
    return new UpdateEncoderFirmwareResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateEncoderFirmwareResponse | PlainMessage<UpdateEncoderFirmwareResponse> | undefined, b: UpdateEncoderFirmwareResponse | PlainMessage<UpdateEncoderFirmwareResponse> | undefined): boolean {
    return proto3.util.equals(UpdateEncoderFirmwareResponse, a, b);
  }
}

/**
 * The metadata message for [`UpdateEncoderFirmware`][salto.nebula.encoder.v1.EncoderService.UpdateEncoderFirmware]
 *
 * @generated from message salto.nebula.encoder.v1.UpdateEncoderFirmwareMetadata
 */
export class UpdateEncoderFirmwareMetadata extends Message<UpdateEncoderFirmwareMetadata> {
  /**
   * Progress of operation. Range: [0, 100].
   *
   * @generated from field: int32 progress_percent = 1;
   */
  progressPercent = 0;

  constructor(data?: PartialMessage<UpdateEncoderFirmwareMetadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "salto.nebula.encoder.v1.UpdateEncoderFirmwareMetadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "progress_percent", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateEncoderFirmwareMetadata {
    return new UpdateEncoderFirmwareMetadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateEncoderFirmwareMetadata {
    return new UpdateEncoderFirmwareMetadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateEncoderFirmwareMetadata {
    return new UpdateEncoderFirmwareMetadata().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateEncoderFirmwareMetadata | PlainMessage<UpdateEncoderFirmwareMetadata> | undefined, b: UpdateEncoderFirmwareMetadata | PlainMessage<UpdateEncoderFirmwareMetadata> | undefined): boolean {
    return proto3.util.equals(UpdateEncoderFirmwareMetadata, a, b);
  }
}

/**
 * The request message for [`ReadKey`][salto.nebula.device.v1.EncoderService.ReadKey]
 *
 * @generated from message salto.nebula.encoder.v1.ReadKeyRequest
 */
export class ReadKeyRequest extends Message<ReadKeyRequest> {
  /**
   * The name of the requested encoder resource. For example:
   * `installations/surelock-homes-hq/encoders/conan-doyle`.
   *
   * @generated from field: string encoder = 1;
   */
  encoder = "";

  constructor(data?: PartialMessage<ReadKeyRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "salto.nebula.encoder.v1.ReadKeyRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "encoder", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReadKeyRequest {
    return new ReadKeyRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReadKeyRequest {
    return new ReadKeyRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReadKeyRequest {
    return new ReadKeyRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ReadKeyRequest | PlainMessage<ReadKeyRequest> | undefined, b: ReadKeyRequest | PlainMessage<ReadKeyRequest> | undefined): boolean {
    return proto3.util.equals(ReadKeyRequest, a, b);
  }
}

/**
 * The response message for [`ReadKey`][salto.nebula.device.v1.EncoderService.ReadKey]
 *
 * @generated from message salto.nebula.encoder.v1.ReadKeyResponse
 */
export class ReadKeyResponse extends Message<ReadKeyResponse> {
  /**
   * The key that was read, if any.
   *
   * @generated from oneof salto.nebula.encoder.v1.ReadKeyResponse.key
   */
  key: {
    /**
     * Card key reference, belonging to a user.
     *
     * @generated from field: string card_key = 1;
     */
    value: string;
    case: "cardKey";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<ReadKeyResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "salto.nebula.encoder.v1.ReadKeyResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "card_key", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "key" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReadKeyResponse {
    return new ReadKeyResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReadKeyResponse {
    return new ReadKeyResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReadKeyResponse {
    return new ReadKeyResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ReadKeyResponse | PlainMessage<ReadKeyResponse> | undefined, b: ReadKeyResponse | PlainMessage<ReadKeyResponse> | undefined): boolean {
    return proto3.util.equals(ReadKeyResponse, a, b);
  }
}

/**
 * The metadata message for [`ReadKey`][salto.nebula.device.v1.EncoderService.ReadKey]
 *
 * @generated from message salto.nebula.encoder.v1.ReadKeyMetadata
 */
export class ReadKeyMetadata extends Message<ReadKeyMetadata> {
  constructor(data?: PartialMessage<ReadKeyMetadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "salto.nebula.encoder.v1.ReadKeyMetadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReadKeyMetadata {
    return new ReadKeyMetadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReadKeyMetadata {
    return new ReadKeyMetadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReadKeyMetadata {
    return new ReadKeyMetadata().fromJsonString(jsonString, options);
  }

  static equals(a: ReadKeyMetadata | PlainMessage<ReadKeyMetadata> | undefined, b: ReadKeyMetadata | PlainMessage<ReadKeyMetadata> | undefined): boolean {
    return proto3.util.equals(ReadKeyMetadata, a, b);
  }
}

/**
 * The request message for [`GenerateAuthorizationToken`][salto.nebula.encoder.v1.EncoderService.GenerateAuthorizationToken]
 *
 * @generated from message salto.nebula.encoder.v1.GenerateAuthorizationTokenRequest
 */
export class GenerateAuthorizationTokenRequest extends Message<GenerateAuthorizationTokenRequest> {
  /**
   * The resource name of the encoder that the authorization token is
   * generated for. For example:
   * `installations/surelock-homes-hq/encoders/conan-doyle`.
   *
   * @generated from field: string encoder = 1;
   */
  encoder = "";

  constructor(data?: PartialMessage<GenerateAuthorizationTokenRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "salto.nebula.encoder.v1.GenerateAuthorizationTokenRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "encoder", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GenerateAuthorizationTokenRequest {
    return new GenerateAuthorizationTokenRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GenerateAuthorizationTokenRequest {
    return new GenerateAuthorizationTokenRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GenerateAuthorizationTokenRequest {
    return new GenerateAuthorizationTokenRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GenerateAuthorizationTokenRequest | PlainMessage<GenerateAuthorizationTokenRequest> | undefined, b: GenerateAuthorizationTokenRequest | PlainMessage<GenerateAuthorizationTokenRequest> | undefined): boolean {
    return proto3.util.equals(GenerateAuthorizationTokenRequest, a, b);
  }
}

/**
 * The response message for [`GenerateAuthorizationToken`][salto.nebula.encoder.v1.EncoderService.GenerateAuthorizationToken]
 *
 * @generated from message salto.nebula.encoder.v1.GenerateAuthorizationTokenResponse
 */
export class GenerateAuthorizationTokenResponse extends Message<GenerateAuthorizationTokenResponse> {
  /**
   * Authorization token to be used for connecting against an encoder.
   *
   * @generated from field: bytes authorization_token = 1;
   */
  authorizationToken = new Uint8Array(0);

  constructor(data?: PartialMessage<GenerateAuthorizationTokenResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "salto.nebula.encoder.v1.GenerateAuthorizationTokenResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "authorization_token", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GenerateAuthorizationTokenResponse {
    return new GenerateAuthorizationTokenResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GenerateAuthorizationTokenResponse {
    return new GenerateAuthorizationTokenResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GenerateAuthorizationTokenResponse {
    return new GenerateAuthorizationTokenResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GenerateAuthorizationTokenResponse | PlainMessage<GenerateAuthorizationTokenResponse> | undefined, b: GenerateAuthorizationTokenResponse | PlainMessage<GenerateAuthorizationTokenResponse> | undefined): boolean {
    return proto3.util.equals(GenerateAuthorizationTokenResponse, a, b);
  }
}

/**
 * The request message for [`GenerateFirmwareDownloadUri`][salto.nebula.encoder.v1.EncoderService.GenerateFirmwareDownloadUri]
 *
 * @generated from message salto.nebula.encoder.v1.GenerateFirmwareDownloadUriRequest
 */
export class GenerateFirmwareDownloadUriRequest extends Message<GenerateFirmwareDownloadUriRequest> {
  /**
   * The resource name of the encoder to get the firmware download URI.
   * For example: `installations/surelock-homes-hq/encoders/conan-doyle`.
   *
   * @generated from field: string encoder = 1;
   */
  encoder = "";

  constructor(data?: PartialMessage<GenerateFirmwareDownloadUriRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "salto.nebula.encoder.v1.GenerateFirmwareDownloadUriRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "encoder", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GenerateFirmwareDownloadUriRequest {
    return new GenerateFirmwareDownloadUriRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GenerateFirmwareDownloadUriRequest {
    return new GenerateFirmwareDownloadUriRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GenerateFirmwareDownloadUriRequest {
    return new GenerateFirmwareDownloadUriRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GenerateFirmwareDownloadUriRequest | PlainMessage<GenerateFirmwareDownloadUriRequest> | undefined, b: GenerateFirmwareDownloadUriRequest | PlainMessage<GenerateFirmwareDownloadUriRequest> | undefined): boolean {
    return proto3.util.equals(GenerateFirmwareDownloadUriRequest, a, b);
  }
}

/**
 * The response message for [`GenerateFirmwareDownloadUri`][salto.nebula.encoder.v1.EncoderService.GenerateFirmwareDownloadUri]
 *
 * @generated from message salto.nebula.encoder.v1.GenerateFirmwareDownloadUriResponse
 */
export class GenerateFirmwareDownloadUriResponse extends Message<GenerateFirmwareDownloadUriResponse> {
  /**
   * The URI to download the firmware bundle. The URI will be valid for 15
   * minutes.
   *
   * @generated from field: string download_uri = 1;
   */
  downloadUri = "";

  /**
   * Digest of the file to be download. This can be used to cache the file and
   * avoid downloading it multiple times.
   * The digest has the following format: `<algorithm>:<digest>`.
   * For example: `sha256:8ff2483f2fbaa6c8dfd4e3556dbde298eb5e342b5e46f84eabdccc8e1cbe2d5a`.
   *
   * @generated from field: string digest = 2;
   */
  digest = "";

  constructor(data?: PartialMessage<GenerateFirmwareDownloadUriResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "salto.nebula.encoder.v1.GenerateFirmwareDownloadUriResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "download_uri", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "digest", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GenerateFirmwareDownloadUriResponse {
    return new GenerateFirmwareDownloadUriResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GenerateFirmwareDownloadUriResponse {
    return new GenerateFirmwareDownloadUriResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GenerateFirmwareDownloadUriResponse {
    return new GenerateFirmwareDownloadUriResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GenerateFirmwareDownloadUriResponse | PlainMessage<GenerateFirmwareDownloadUriResponse> | undefined, b: GenerateFirmwareDownloadUriResponse | PlainMessage<GenerateFirmwareDownloadUriResponse> | undefined): boolean {
    return proto3.util.equals(GenerateFirmwareDownloadUriResponse, a, b);
  }
}

/**
 * The metadata message for [`GenerateFirmwareDownloadUri`][salto.nebula.encoder.v1.EncoderService.GenerateFirmwareDownloadUri]
 *
 * @generated from message salto.nebula.encoder.v1.GenerateFirmwareDownloadUriMetadata
 */
export class GenerateFirmwareDownloadUriMetadata extends Message<GenerateFirmwareDownloadUriMetadata> {
  constructor(data?: PartialMessage<GenerateFirmwareDownloadUriMetadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "salto.nebula.encoder.v1.GenerateFirmwareDownloadUriMetadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GenerateFirmwareDownloadUriMetadata {
    return new GenerateFirmwareDownloadUriMetadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GenerateFirmwareDownloadUriMetadata {
    return new GenerateFirmwareDownloadUriMetadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GenerateFirmwareDownloadUriMetadata {
    return new GenerateFirmwareDownloadUriMetadata().fromJsonString(jsonString, options);
  }

  static equals(a: GenerateFirmwareDownloadUriMetadata | PlainMessage<GenerateFirmwareDownloadUriMetadata> | undefined, b: GenerateFirmwareDownloadUriMetadata | PlainMessage<GenerateFirmwareDownloadUriMetadata> | undefined): boolean {
    return proto3.util.equals(GenerateFirmwareDownloadUriMetadata, a, b);
  }
}

