// @generated by protoc-gen-connect-es v1.3.0 with parameter "target=ts,import_extension=none"
// @generated from file salto/nebula/controller/v1/controller.proto (package salto.nebula.controller.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { BindControllerRequest, BindControllerResponse, ConfigureControllerRequest, Controller, CreateControllerRequest, DeleteControllerRequest, GenerateAuthorizationTokenRequest, GenerateAuthorizationTokenResponse, GenerateFirmwareDownloadUriRequest, GetControllerRequest, InitializeControllerRequest, ListControllersRequest, ListControllersResponse, ResetControllerRequest, UnbindControllerRequest, UnbindControllerResponse, UpdateControllerFirmwareRequest, UpdateControllerRequest } from "./controller_pb";
import { Empty, MethodKind } from "@bufbuild/protobuf";
import { Operation } from "@saltoapis/longrunning-v1";

/**
 * Controllers are mains-wired hardware devices that can be used to control access where
 * a standalone lock cannot be fitted. For example, on car park barriers, turnstiles or
 * sliding doors. They allow the management of multiple accesses from a single device.
 * For example, one single controller could control access to both the entrance and exit
 * of a building via a turnstile. This service is responsible for managing controllers
 * resources.
 *
 * @generated from service salto.nebula.controller.v1.ControllerService
 */
export const ControllerService = {
  typeName: "salto.nebula.controller.v1.ControllerService",
  methods: {
    /**
     * Create a controller
     *
     * Creates a new controller
     *
     * @generated from rpc salto.nebula.controller.v1.ControllerService.CreateController
     */
    createController: {
      name: "CreateController",
      I: CreateControllerRequest,
      O: Controller,
      kind: MethodKind.Unary,
    },
    /**
     * Get a controller
     *
     * Gets an existing controller.
     *
     * @generated from rpc salto.nebula.controller.v1.ControllerService.GetController
     */
    getController: {
      name: "GetController",
      I: GetControllerRequest,
      O: Controller,
      kind: MethodKind.Unary,
    },
    /**
     * List controllers
     *
     * Returns a list of controllers that have been previously created.
     *
     * @generated from rpc salto.nebula.controller.v1.ControllerService.ListControllers
     */
    listControllers: {
      name: "ListControllers",
      I: ListControllersRequest,
      O: ListControllersResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Update a controller
     *
     * Updates an existing controller.
     *
     * @generated from rpc salto.nebula.controller.v1.ControllerService.UpdateController
     */
    updateController: {
      name: "UpdateController",
      I: UpdateControllerRequest,
      O: Controller,
      kind: MethodKind.Unary,
    },
    /**
     * Delete a controller
     *
     * Permanently deletes a controller. This cannot be undone.
     *
     * @generated from rpc salto.nebula.controller.v1.ControllerService.DeleteController
     */
    deleteController: {
      name: "DeleteController",
      I: DeleteControllerRequest,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * Bind a controller
     *
     * Binds a controller. Binding a controller assigns a device
     * identifier to the controller. After binding, the device can then be
     * initialized or configured.
     *
     * @generated from rpc salto.nebula.controller.v1.ControllerService.BindController
     */
    bindController: {
      name: "BindController",
      I: BindControllerRequest,
      O: BindControllerResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Unbind a controller
     *
     * Unbinds a controller. Unbinding a controller removes the
     * device identifier from the controller. This may be required in some
     * cases where the controller is not available anymore because, for
     * example, it's broken or damaged. Unbinding allows the initialization of
     * the replacement device without removing it from the installation. It also
     * means the device keeps all the information associated with it, such as
     * events.
     *
     * @generated from rpc salto.nebula.controller.v1.ControllerService.UnbindController
     */
    unbindController: {
      name: "UnbindController",
      I: UnbindControllerRequest,
      O: UnbindControllerResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Initialize a controller
     *
     * Initializes a controller. Controllers need to be initialized
     * before you can start to use them.
     *
     * @generated from rpc salto.nebula.controller.v1.ControllerService.InitializeController
     */
    initializeController: {
      name: "InitializeController",
      I: InitializeControllerRequest,
      O: Operation,
      kind: MethodKind.Unary,
    },
    /**
     * Configure a controller
     *
     * Configures a controller. Configuring a controller implies
     * adding some information to the controller such as setting the time
     * zone.
     *
     * @generated from rpc salto.nebula.controller.v1.ControllerService.ConfigureController
     */
    configureController: {
      name: "ConfigureController",
      I: ConfigureControllerRequest,
      O: Operation,
      kind: MethodKind.Unary,
    },
    /**
     * Reset a controller
     *
     * Resetting a device such as a controller means returning it to its
     * factory settings. Resetting is the process of removing the identity as
     * well as all the associated information of an already configured device.
     * Once a device has been reset, you need to reconfigure it.
     *
     * @generated from rpc salto.nebula.controller.v1.ControllerService.ResetController
     */
    resetController: {
      name: "ResetController",
      I: ResetControllerRequest,
      O: Operation,
      kind: MethodKind.Unary,
    },
    /**
     * Update controller firmware
     *
     * Updates a controller's firmware. SALTO provides firmware updates
     * when new functionality is available or when we fix a bug.
     *
     * @generated from rpc salto.nebula.controller.v1.ControllerService.UpdateControllerFirmware
     */
    updateControllerFirmware: {
      name: "UpdateControllerFirmware",
      I: UpdateControllerFirmwareRequest,
      O: Operation,
      kind: MethodKind.Unary,
    },
    /**
     * Generates an authorization token for a controller
     *
     * Generates an authorization token that allows to connect, authenticate and
     * authorize against a controller.
     *
     * @generated from rpc salto.nebula.controller.v1.ControllerService.GenerateAuthorizationToken
     */
    generateAuthorizationToken: {
      name: "GenerateAuthorizationToken",
      I: GenerateAuthorizationTokenRequest,
      O: GenerateAuthorizationTokenResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Generate controller firmware download URI
     *
     * Provides the download URI for the latest firmware bundle for the
     * controller. The returned URI can be used to bring the controller
     * firmwares up to latest.
     *
     * @generated from rpc salto.nebula.controller.v1.ControllerService.GenerateFirmwareDownloadUri
     */
    generateFirmwareDownloadUri: {
      name: "GenerateFirmwareDownloadUri",
      I: GenerateFirmwareDownloadUriRequest,
      O: Operation,
      kind: MethodKind.Unary,
    },
  }
} as const;

