// @generated by protoc-gen-connect-es v1.3.0 with parameter "target=ts,import_extension=none"
// @generated from file salto/nebula/electronickey/v1/electronic_key.proto (package salto.nebula.electronickey.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { BindElectronicKeyRequest, BindElectronicKeyResponse, ConfigureElectronicKeyRequest, CreateElectronicKeyRequest, DeleteElectronicKeyRequest, ElectronicKey, GenerateAuthorizationTokenRequest, GenerateAuthorizationTokenResponse, GenerateFirmwareDownloadUriRequest, GetElectronicKeyRequest, InitializeElectronicKeyRequest, ListElectronicKeysRequest, ListElectronicKeysResponse, ResetElectronicKeyRequest, UnbindElectronicKeyRequest, UnbindElectronicKeyResponse, UpdateElectronicKeyRequest } from "./electronic_key_pb";
import { Empty, MethodKind } from "@bufbuild/protobuf";
import { Operation } from "@saltoapis/longrunning-v1";

/**
 * An electronic key is battery-powered device used to interact with electronic locks.
 *
 * @generated from service salto.nebula.electronickey.v1.ElectronicKeyService
 */
export const ElectronicKeyService = {
  typeName: "salto.nebula.electronickey.v1.ElectronicKeyService",
  methods: {
    /**
     * Create a new electronic key
     *
     * Creates a new electronic key
     *
     * @generated from rpc salto.nebula.electronickey.v1.ElectronicKeyService.CreateElectronicKey
     */
    createElectronicKey: {
      name: "CreateElectronicKey",
      I: CreateElectronicKeyRequest,
      O: ElectronicKey,
      kind: MethodKind.Unary,
    },
    /**
     * Get an electronic key
     *
     * Gets an existing electronic key.
     *
     * @generated from rpc salto.nebula.electronickey.v1.ElectronicKeyService.GetElectronicKey
     */
    getElectronicKey: {
      name: "GetElectronicKey",
      I: GetElectronicKeyRequest,
      O: ElectronicKey,
      kind: MethodKind.Unary,
    },
    /**
     * List electronic keys
     *
     * Returns a list of electronic keys that have been previously created.
     *
     * @generated from rpc salto.nebula.electronickey.v1.ElectronicKeyService.ListElectronicKeys
     */
    listElectronicKeys: {
      name: "ListElectronicKeys",
      I: ListElectronicKeysRequest,
      O: ListElectronicKeysResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Update an electronic key
     *
     * Updates an existing electronic key.
     *
     * @generated from rpc salto.nebula.electronickey.v1.ElectronicKeyService.UpdateElectronicKey
     */
    updateElectronicKey: {
      name: "UpdateElectronicKey",
      I: UpdateElectronicKeyRequest,
      O: ElectronicKey,
      kind: MethodKind.Unary,
    },
    /**
     * Delete an electronic key
     *
     * Permanently deletes an electronic key. This cannot be undone.
     *
     * @generated from rpc salto.nebula.electronickey.v1.ElectronicKeyService.DeleteElectronicKey
     */
    deleteElectronicKey: {
      name: "DeleteElectronicKey",
      I: DeleteElectronicKeyRequest,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * Bind an electronic key
     *
     * Binds an electronic key. Binding an electronic key assigns a device
     * identifier to the electronic key. After binding, the device can then be
     * initialized or configured.
     *
     * @generated from rpc salto.nebula.electronickey.v1.ElectronicKeyService.BindElectronicKey
     */
    bindElectronicKey: {
      name: "BindElectronicKey",
      I: BindElectronicKeyRequest,
      O: BindElectronicKeyResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Unbind an electronic key
     *
     * Unbinds an electronic key. Unbinding an electronic key removes the
     * device identifier from the electronic key. This may be required in some
     * cases where the electronic key is not available anymore because, for
     * example, it's broken or damaged. Unbinding allows the initialization of
     * the replacement device without removing it from the installation. It also
     * means the device keeps all the information associated with it, such as
     * events.
     *
     * @generated from rpc salto.nebula.electronickey.v1.ElectronicKeyService.UnbindElectronicKey
     */
    unbindElectronicKey: {
      name: "UnbindElectronicKey",
      I: UnbindElectronicKeyRequest,
      O: UnbindElectronicKeyResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Initialize an electronic key
     *
     * Initializes an electronic key. Electronic keys need to be initialized
     * before you can start to use them.
     *
     * @generated from rpc salto.nebula.electronickey.v1.ElectronicKeyService.InitializeElectronicKey
     */
    initializeElectronicKey: {
      name: "InitializeElectronicKey",
      I: InitializeElectronicKeyRequest,
      O: Operation,
      kind: MethodKind.Unary,
    },
    /**
     * Configure an electronic key
     *
     * Configures an electronic key. Configuring an electronic key implies
     * adding some information to the electronic key such as setting the time
     * zone.
     *
     * @generated from rpc salto.nebula.electronickey.v1.ElectronicKeyService.ConfigureElectronicKey
     */
    configureElectronicKey: {
      name: "ConfigureElectronicKey",
      I: ConfigureElectronicKeyRequest,
      O: Operation,
      kind: MethodKind.Unary,
    },
    /**
     * Reset an electronic key
     *
     * Resetting a device such as an electronic key means returning it to its
     * factory settings. Resetting is the process of removing the identity as
     * well as all the associated information of an already configured device.
     * Once a device has been reset, you need to reconfigure it.
     *
     * @generated from rpc salto.nebula.electronickey.v1.ElectronicKeyService.ResetElectronicKey
     */
    resetElectronicKey: {
      name: "ResetElectronicKey",
      I: ResetElectronicKeyRequest,
      O: Operation,
      kind: MethodKind.Unary,
    },
    /**
     * Generate authorization token for an electronic key
     *
     * Generates an authorization token that allows to connect to, authenticate and
     * authorize an electronic key.
     *
     * @generated from rpc salto.nebula.electronickey.v1.ElectronicKeyService.GenerateAuthorizationToken
     */
    generateAuthorizationToken: {
      name: "GenerateAuthorizationToken",
      I: GenerateAuthorizationTokenRequest,
      O: GenerateAuthorizationTokenResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Generate electronic key firmware download URI
     *
     * Provides the download URI for the latest firmware bundle for the
     * electronic key. The returned URI can be used to bring the electronic key
     * firmwares up to latest.
     *
     * @generated from rpc salto.nebula.electronickey.v1.ElectronicKeyService.GenerateFirmwareDownloadUri
     */
    generateFirmwareDownloadUri: {
      name: "GenerateFirmwareDownloadUri",
      I: GenerateFirmwareDownloadUriRequest,
      O: Operation,
      kind: MethodKind.Unary,
    },
  }
} as const;

