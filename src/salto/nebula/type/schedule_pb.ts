// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=none"
// @generated from file salto/nebula/type/schedule.proto (package salto.nebula.type, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { TimeOfDay } from "@saltoapis/type";
import { DayType } from "./day_type_pb";
import { DayOfWeek } from "@saltoapis/type";

/**
 * Represents an schedule.
 *
 * @generated from message salto.nebula.type.Schedule
 */
export class Schedule extends Message<Schedule> {
  /**
   * Days when it's valid.
   *
   * @generated from field: repeated salto.nebula.type.Schedule.Day days = 1;
   */
  days: Schedule_Day[] = [];

  /**
   * Start time of day when schedule starts being valid.
   *
   * @generated from field: salto.type.TimeOfDay start_time = 2;
   */
  startTime?: TimeOfDay;

  /**
   * End time of day when schedule ends being valid.
   *
   * @generated from field: salto.type.TimeOfDay end_time = 3;
   */
  endTime?: TimeOfDay;

  constructor(data?: PartialMessage<Schedule>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "salto.nebula.type.Schedule";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "days", kind: "message", T: Schedule_Day, repeated: true },
    { no: 2, name: "start_time", kind: "message", T: TimeOfDay },
    { no: 3, name: "end_time", kind: "message", T: TimeOfDay },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Schedule {
    return new Schedule().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Schedule {
    return new Schedule().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Schedule {
    return new Schedule().fromJsonString(jsonString, options);
  }

  static equals(a: Schedule | PlainMessage<Schedule> | undefined, b: Schedule | PlainMessage<Schedule> | undefined): boolean {
    return proto3.util.equals(Schedule, a, b);
  }
}

/**
 * Day of the week
 *
 * @generated from message salto.nebula.type.Schedule.Day
 */
export class Schedule_Day extends Message<Schedule_Day> {
  /**
   * Day type
   *
   * @generated from field: salto.nebula.type.DayType day_type = 1;
   */
  dayType = DayType.DAY_TYPE_UNSPECIFIED;

  /**
   * In case `day_type` is `NORMAL`, the specific day of the week.
   *
   * @generated from field: salto.type.DayOfWeek day_of_week = 2;
   */
  dayOfWeek = DayOfWeek.DAY_OF_WEEK_UNSPECIFIED;

  constructor(data?: PartialMessage<Schedule_Day>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "salto.nebula.type.Schedule.Day";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "day_type", kind: "enum", T: proto3.getEnumType(DayType) },
    { no: 2, name: "day_of_week", kind: "enum", T: proto3.getEnumType(DayOfWeek) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Schedule_Day {
    return new Schedule_Day().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Schedule_Day {
    return new Schedule_Day().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Schedule_Day {
    return new Schedule_Day().fromJsonString(jsonString, options);
  }

  static equals(a: Schedule_Day | PlainMessage<Schedule_Day> | undefined, b: Schedule_Day | PlainMessage<Schedule_Day> | undefined): boolean {
    return proto3.util.equals(Schedule_Day, a, b);
  }
}

