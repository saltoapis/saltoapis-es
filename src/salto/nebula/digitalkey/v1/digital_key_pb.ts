// @generated by protoc-gen-es v1.3.1 with parameter "target=ts,import_extension=none"
// @generated from file salto/nebula/digitalkey/v1/digital_key.proto (package salto.nebula.digitalkey.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";
import { Color } from "@saltoapis/type";

/**
 * The digital key object
 *
 * @generated from message salto.nebula.digitalkey.v1.DigitalKey
 */
export class DigitalKey extends Message<DigitalKey> {
  /**
   * Resource name of the digital key. It must have the format of
   * `digital-keys/*`. For example: `digital-keys/baker-street-entrance`.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * A specific type of digital key.
   *
   * @generated from oneof salto.nebula.digitalkey.v1.DigitalKey.type
   */
  type: {
    /**
     * An app key.
     *
     * @generated from field: salto.nebula.digitalkey.v1.DigitalKey.AppKey app_key = 2;
     */
    value: DigitalKey_AppKey;
    case: "appKey";
  } | {
    /**
     * A wallet key.
     *
     * @generated from field: salto.nebula.digitalkey.v1.DigitalKey.WalletKey wallet_key = 3;
     */
    value: DigitalKey_WalletKey;
    case: "walletKey";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<DigitalKey>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "salto.nebula.digitalkey.v1.DigitalKey";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "app_key", kind: "message", T: DigitalKey_AppKey, oneof: "type" },
    { no: 3, name: "wallet_key", kind: "message", T: DigitalKey_WalletKey, oneof: "type" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DigitalKey {
    return new DigitalKey().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DigitalKey {
    return new DigitalKey().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DigitalKey {
    return new DigitalKey().fromJsonString(jsonString, options);
  }

  static equals(a: DigitalKey | PlainMessage<DigitalKey> | undefined, b: DigitalKey | PlainMessage<DigitalKey> | undefined): boolean {
    return proto3.util.equals(DigitalKey, a, b);
  }
}

/**
 * Metadata associated to the digital key.
 *
 * @generated from message salto.nebula.digitalkey.v1.DigitalKey.Metadata
 */
export class DigitalKey_Metadata extends Message<DigitalKey_Metadata> {
  /**
   * The title of the digital key.
   *
   * @generated from field: string title = 1;
   */
  title = "";

  /**
   * The subtitle of the digital key.
   *
   * @generated from field: string subtitle = 2;
   */
  subtitle = "";

  /**
   * The URI to view the digital key photo.
   *
   * @generated from field: string photo_uri = 3;
   */
  photoUri = "";

  /**
   * Unstructured address of the digital key location.
   *
   * For example: "1600 Amphitheatre Pkwy, Mountain View, CA 94043,
   * Sunnyvale, California."
   *
   * @generated from field: string address = 4;
   */
  address = "";

  /**
   * The color used to display the text on top of the background image.
   *
   * @generated from field: salto.type.Color text_color = 5;
   */
  textColor?: Color;

  constructor(data?: PartialMessage<DigitalKey_Metadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "salto.nebula.digitalkey.v1.DigitalKey.Metadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "subtitle", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "photo_uri", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "text_color", kind: "message", T: Color },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DigitalKey_Metadata {
    return new DigitalKey_Metadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DigitalKey_Metadata {
    return new DigitalKey_Metadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DigitalKey_Metadata {
    return new DigitalKey_Metadata().fromJsonString(jsonString, options);
  }

  static equals(a: DigitalKey_Metadata | PlainMessage<DigitalKey_Metadata> | undefined, b: DigitalKey_Metadata | PlainMessage<DigitalKey_Metadata> | undefined): boolean {
    return proto3.util.equals(DigitalKey_Metadata, a, b);
  }
}

/**
 * App key.
 *
 * @generated from message salto.nebula.digitalkey.v1.DigitalKey.AppKey
 */
export class DigitalKey_AppKey extends Message<DigitalKey_AppKey> {
  /**
   * Metadata associated to this app key.
   *
   * @generated from field: salto.nebula.digitalkey.v1.DigitalKey.Metadata metadata = 1;
   */
  metadata?: DigitalKey_Metadata;

  /**
   * An encrypted and authenticated data blob of the app key.
   *
   * @generated from field: bytes data = 2;
   */
  data = new Uint8Array(0);

  /**
   * The resource name of the installation this app key belong to.
   * For example: `installations/surelock-homes-hq`.
   *
   * @generated from field: string installation = 5;
   */
  installation = "";

  /**
   * The resource name of the unit this app key belong to.
   * For example: `installations/surelock-homes-hq/units/101`.
   *
   * @generated from field: optional string unit = 6;
   */
  unit?: string;

  /**
   * Installation identifier for low-level purposes.
   *
   * WARNING: This is going to be removed after the initial nebula release
   * as its only purpose is to ease the installation picking mechanism in
   * mobile apps.
   *
   * @generated from field: string installation_id = 3;
   */
  installationId = "";

  /**
   * Unit identifier for low-level purposes.
   *
   * WARNING: This is going to be removed after the initial nebula release
   * as its only purpose is to ease the unit picking mechanism in mobile
   * apps.
   *
   * @generated from field: optional string unit_id = 4;
   */
  unitId?: string;

  /**
   * Access points change time.
   *
   * This data is populated with the user access points sync time.
   * Indicates the last time the digital key's access points changed.
   *
   * @generated from field: google.protobuf.Timestamp access_points_change_time = 7;
   */
  accessPointsChangeTime?: Timestamp;

  constructor(data?: PartialMessage<DigitalKey_AppKey>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "salto.nebula.digitalkey.v1.DigitalKey.AppKey";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: DigitalKey_Metadata },
    { no: 2, name: "data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 5, name: "installation", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "unit", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "installation_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "unit_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 7, name: "access_points_change_time", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DigitalKey_AppKey {
    return new DigitalKey_AppKey().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DigitalKey_AppKey {
    return new DigitalKey_AppKey().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DigitalKey_AppKey {
    return new DigitalKey_AppKey().fromJsonString(jsonString, options);
  }

  static equals(a: DigitalKey_AppKey | PlainMessage<DigitalKey_AppKey> | undefined, b: DigitalKey_AppKey | PlainMessage<DigitalKey_AppKey> | undefined): boolean {
    return proto3.util.equals(DigitalKey_AppKey, a, b);
  }
}

/**
 * Wallet key.
 *
 * @generated from message salto.nebula.digitalkey.v1.DigitalKey.WalletKey
 */
export class DigitalKey_WalletKey extends Message<DigitalKey_WalletKey> {
  /**
   * Metadata associated to this wallet key.
   *
   * @generated from field: salto.nebula.digitalkey.v1.DigitalKey.Metadata metadata = 1;
   */
  metadata?: DigitalKey_Metadata;

  /**
   * Hydra credential of this user's wallet key.
   *
   * @generated from field: salto.nebula.digitalkey.v1.DigitalKey.WalletKey.HydraCredential hydra_credential = 2;
   */
  hydraCredential?: DigitalKey_WalletKey_HydraCredential;

  constructor(data?: PartialMessage<DigitalKey_WalletKey>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "salto.nebula.digitalkey.v1.DigitalKey.WalletKey";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: DigitalKey_Metadata },
    { no: 2, name: "hydra_credential", kind: "message", T: DigitalKey_WalletKey_HydraCredential },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DigitalKey_WalletKey {
    return new DigitalKey_WalletKey().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DigitalKey_WalletKey {
    return new DigitalKey_WalletKey().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DigitalKey_WalletKey {
    return new DigitalKey_WalletKey().fromJsonString(jsonString, options);
  }

  static equals(a: DigitalKey_WalletKey | PlainMessage<DigitalKey_WalletKey> | undefined, b: DigitalKey_WalletKey | PlainMessage<DigitalKey_WalletKey> | undefined): boolean {
    return proto3.util.equals(DigitalKey_WalletKey, a, b);
  }
}

/**
 * Representation of an Hydra credential
 *
 * @generated from message salto.nebula.digitalkey.v1.DigitalKey.WalletKey.HydraCredential
 */
export class DigitalKey_WalletKey_HydraCredential extends Message<DigitalKey_WalletKey_HydraCredential> {
  /**
   * Credential identifier created and managed by Wallet Hub.
   *
   * @generated from field: string credential_id = 1;
   */
  credentialId = "";

  /**
   * An identifier that helps mapping which devices are being provisioned
   * simultaneously as a result of user initiating an in-app provisioning
   * on the main device.
   *
   * @generated from field: string sharing_instance_id = 2;
   */
  sharingInstanceId = "";

  /**
   * An identifier that has a direct reference to user's account with the
   * issuer.
   *
   * @generated from field: string account_hash = 3;
   */
  accountHash = "";

  /**
   * Card template identifier. Identifies a combination of
   * card profile identifier, card configuration identifier and
   * card art bundle name.
   *
   * @generated from field: string template_id = 4;
   */
  templateId = "";

  /**
   * An identifier representing an entity that uses a FIDO protocol to
   * directly authenticate users.
   *
   * @generated from field: string relying_party_id = 5;
   */
  relyingPartyId = "";

  /**
   * Reference identifier for this card.
   *
   * @generated from field: string reference_id = 6;
   */
  referenceId = "";

  constructor(data?: PartialMessage<DigitalKey_WalletKey_HydraCredential>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "salto.nebula.digitalkey.v1.DigitalKey.WalletKey.HydraCredential";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "credential_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "sharing_instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "account_hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "template_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "relying_party_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "reference_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DigitalKey_WalletKey_HydraCredential {
    return new DigitalKey_WalletKey_HydraCredential().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DigitalKey_WalletKey_HydraCredential {
    return new DigitalKey_WalletKey_HydraCredential().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DigitalKey_WalletKey_HydraCredential {
    return new DigitalKey_WalletKey_HydraCredential().fromJsonString(jsonString, options);
  }

  static equals(a: DigitalKey_WalletKey_HydraCredential | PlainMessage<DigitalKey_WalletKey_HydraCredential> | undefined, b: DigitalKey_WalletKey_HydraCredential | PlainMessage<DigitalKey_WalletKey_HydraCredential> | undefined): boolean {
    return proto3.util.equals(DigitalKey_WalletKey_HydraCredential, a, b);
  }
}

/**
 * The request message for [`GetDigitalKey`][salto.nebula.digitalkey.v1.DigitalKeyService.GetDigitalKey]
 *
 * @generated from message salto.nebula.digitalkey.v1.GetDigitalKeyRequest
 */
export class GetDigitalKeyRequest extends Message<GetDigitalKeyRequest> {
  /**
   * The name of the requested digital key resource. For example:
   * `digital-keys/baker-street-entrance`.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<GetDigitalKeyRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "salto.nebula.digitalkey.v1.GetDigitalKeyRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetDigitalKeyRequest {
    return new GetDigitalKeyRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetDigitalKeyRequest {
    return new GetDigitalKeyRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetDigitalKeyRequest {
    return new GetDigitalKeyRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetDigitalKeyRequest | PlainMessage<GetDigitalKeyRequest> | undefined, b: GetDigitalKeyRequest | PlainMessage<GetDigitalKeyRequest> | undefined): boolean {
    return proto3.util.equals(GetDigitalKeyRequest, a, b);
  }
}

/**
 * The request message for [`ListDigitalKeys`][salto.nebula.digitalkey.v1.DigitalKeyService.ListDigitalKeys]
 *
 * @generated from message salto.nebula.digitalkey.v1.ListDigitalKeysRequest
 */
export class ListDigitalKeysRequest extends Message<ListDigitalKeysRequest> {
  /**
   * The maximum number of items to return.
   *
   * @generated from field: int32 page_size = 1;
   */
  pageSize = 0;

  /**
   * The `next_page_token` value returned from a previous `List` request, if
   * any.
   *
   * @generated from field: string page_token = 2;
   */
  pageToken = "";

  /**
   * A filter that chooses which digital keys to return.
   *
   * @generated from field: string filter = 3;
   */
  filter = "";

  /**
   * How the results should be sorted.
   *
   * @generated from field: string order_by = 4;
   */
  orderBy = "";

  constructor(data?: PartialMessage<ListDigitalKeysRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "salto.nebula.digitalkey.v1.ListDigitalKeysRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "page_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "filter", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "order_by", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListDigitalKeysRequest {
    return new ListDigitalKeysRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListDigitalKeysRequest {
    return new ListDigitalKeysRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListDigitalKeysRequest {
    return new ListDigitalKeysRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListDigitalKeysRequest | PlainMessage<ListDigitalKeysRequest> | undefined, b: ListDigitalKeysRequest | PlainMessage<ListDigitalKeysRequest> | undefined): boolean {
    return proto3.util.equals(ListDigitalKeysRequest, a, b);
  }
}

/**
 * The response message for [`ListDigitalKeys`][salto.nebula.digitalkey.v1.DigitalKeyService.ListDigitalKeys]
 *
 * @generated from message salto.nebula.digitalkey.v1.ListDigitalKeysResponse
 */
export class ListDigitalKeysResponse extends Message<ListDigitalKeysResponse> {
  /**
   * The field name should match the noun `digital_keys` in the method name.
   * There will be a maximum number of items returned based on the `page_size`
   * field in the request.
   *
   * @generated from field: repeated salto.nebula.digitalkey.v1.DigitalKey digital_keys = 1;
   */
  digitalKeys: DigitalKey[] = [];

  /**
   * Token to retrieve the next page of results, or empty if there are no more
   * results in the list.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListDigitalKeysResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "salto.nebula.digitalkey.v1.ListDigitalKeysResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "digital_keys", kind: "message", T: DigitalKey, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListDigitalKeysResponse {
    return new ListDigitalKeysResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListDigitalKeysResponse {
    return new ListDigitalKeysResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListDigitalKeysResponse {
    return new ListDigitalKeysResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListDigitalKeysResponse | PlainMessage<ListDigitalKeysResponse> | undefined, b: ListDigitalKeysResponse | PlainMessage<ListDigitalKeysResponse> | undefined): boolean {
    return proto3.util.equals(ListDigitalKeysResponse, a, b);
  }
}

/**
 * The digital key's access point association
 *
 * @generated from message salto.nebula.digitalkey.v1.DigitalKeyAccessPoint
 */
export class DigitalKeyAccessPoint extends Message<DigitalKeyAccessPoint> {
  /**
   *  Resource name of the access point. It must have the format
   * `digital-keys/{digital-key}/access-points/*`. For example:
   * `digital-keys/baker-street-key/access-points/baker-street-entrance`.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * Display name of the access point.
   *
   * @generated from field: string display_name = 2;
   */
  displayName = "";

  /**
   * The device which gives coverage to the access point.
   *
   * @generated from field: string device_id = 3;
   */
  deviceId = "";

  constructor(data?: PartialMessage<DigitalKeyAccessPoint>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "salto.nebula.digitalkey.v1.DigitalKeyAccessPoint";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "display_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "device_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DigitalKeyAccessPoint {
    return new DigitalKeyAccessPoint().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DigitalKeyAccessPoint {
    return new DigitalKeyAccessPoint().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DigitalKeyAccessPoint {
    return new DigitalKeyAccessPoint().fromJsonString(jsonString, options);
  }

  static equals(a: DigitalKeyAccessPoint | PlainMessage<DigitalKeyAccessPoint> | undefined, b: DigitalKeyAccessPoint | PlainMessage<DigitalKeyAccessPoint> | undefined): boolean {
    return proto3.util.equals(DigitalKeyAccessPoint, a, b);
  }
}

/**
 * The request message for [`GetDigitalKeyAccessPoint`][salto.nebula.digitalkey.v1.DigitalKeyService.GetDigitalKeyAccessPoint]
 *
 * @generated from message salto.nebula.digitalkey.v1.GetDigitalKeyAccessPointRequest
 */
export class GetDigitalKeyAccessPointRequest extends Message<GetDigitalKeyAccessPointRequest> {
  /**
   * The name of the requested access point resource. For example:
   * `digital-keys/baker-street-key/access-points/baker-street-entrance`.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<GetDigitalKeyAccessPointRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "salto.nebula.digitalkey.v1.GetDigitalKeyAccessPointRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetDigitalKeyAccessPointRequest {
    return new GetDigitalKeyAccessPointRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetDigitalKeyAccessPointRequest {
    return new GetDigitalKeyAccessPointRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetDigitalKeyAccessPointRequest {
    return new GetDigitalKeyAccessPointRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetDigitalKeyAccessPointRequest | PlainMessage<GetDigitalKeyAccessPointRequest> | undefined, b: GetDigitalKeyAccessPointRequest | PlainMessage<GetDigitalKeyAccessPointRequest> | undefined): boolean {
    return proto3.util.equals(GetDigitalKeyAccessPointRequest, a, b);
  }
}

/**
 * The request message for [`ListDigitalKeyAccessPoints`][salto.nebula.digitalkey.v1.DigitalKeyService.ListDigitalKeyAccessPoints]
 *
 * @generated from message salto.nebula.digitalkey.v1.ListDigitalKeyAccessPointsRequest
 */
export class ListDigitalKeyAccessPointsRequest extends Message<ListDigitalKeyAccessPointsRequest> {
  /**
   * The parent resource name. For example, `digital-keys/baker-street-key`.
   *
   * @generated from field: string parent = 1;
   */
  parent = "";

  /**
   * A filter that chooses which access points to return.
   *
   * @generated from field: string filter = 2;
   */
  filter = "";

  /**
   * The maximum number of items to return.
   *
   * @generated from field: int32 page_size = 3;
   */
  pageSize = 0;

  /**
   * The `next_page_token` value returned from a previous `List` request, if
   * any.
   *
   * @generated from field: string page_token = 4;
   */
  pageToken = "";

  constructor(data?: PartialMessage<ListDigitalKeyAccessPointsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "salto.nebula.digitalkey.v1.ListDigitalKeyAccessPointsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "parent", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "filter", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "page_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListDigitalKeyAccessPointsRequest {
    return new ListDigitalKeyAccessPointsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListDigitalKeyAccessPointsRequest {
    return new ListDigitalKeyAccessPointsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListDigitalKeyAccessPointsRequest {
    return new ListDigitalKeyAccessPointsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListDigitalKeyAccessPointsRequest | PlainMessage<ListDigitalKeyAccessPointsRequest> | undefined, b: ListDigitalKeyAccessPointsRequest | PlainMessage<ListDigitalKeyAccessPointsRequest> | undefined): boolean {
    return proto3.util.equals(ListDigitalKeyAccessPointsRequest, a, b);
  }
}

/**
 * The request message for [`ListDigitalKeyAccessPoints`][salto.nebula.digitalkey.v1.DigitalKeyService.ListDigitalKeyAccessPoints]
 *
 * @generated from message salto.nebula.digitalkey.v1.ListDigitalKeyAccessPointsResponse
 */
export class ListDigitalKeyAccessPointsResponse extends Message<ListDigitalKeyAccessPointsResponse> {
  /**
   * The field name should match the noun `digital_key_access_points` in the method name.
   * There will be a maximum number of items returned based on the `page_size`
   * field in the request.
   *
   * @generated from field: repeated salto.nebula.digitalkey.v1.DigitalKeyAccessPoint digital_key_access_points = 1;
   */
  digitalKeyAccessPoints: DigitalKeyAccessPoint[] = [];

  /**
   * Token to retrieve the next page of results, or empty if there are no more
   * results in the list.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListDigitalKeyAccessPointsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "salto.nebula.digitalkey.v1.ListDigitalKeyAccessPointsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "digital_key_access_points", kind: "message", T: DigitalKeyAccessPoint, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListDigitalKeyAccessPointsResponse {
    return new ListDigitalKeyAccessPointsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListDigitalKeyAccessPointsResponse {
    return new ListDigitalKeyAccessPointsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListDigitalKeyAccessPointsResponse {
    return new ListDigitalKeyAccessPointsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListDigitalKeyAccessPointsResponse | PlainMessage<ListDigitalKeyAccessPointsResponse> | undefined, b: ListDigitalKeyAccessPointsResponse | PlainMessage<ListDigitalKeyAccessPointsResponse> | undefined): boolean {
    return proto3.util.equals(ListDigitalKeyAccessPointsResponse, a, b);
  }
}

