// @generated by protoc-gen-es v1.3.1 with parameter "target=ts,import_extension=none"
// @generated from file salto/nebula/file/v1/file.proto (package salto.nebula.file.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * A file is a representation of a digital file. It does not store
 * the actual file data but rather serves as a reference for files
 * stored elsewhere.
 *
 * @generated from message salto.nebula.file.v1.File
 */
export class File extends Message<File> {
  /**
   * Resource name of the file. It must have the format
   * `installations/*\/files/*`. For example:
   * `installations/surelock-homes-hq/files/01DSYSJ1PR36VVC3MRFRV4DC7G`.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * The private URL to upload the file to.
   *
   * @generated from field: string upload_uri = 2;
   */
  uploadUri = "";

  constructor(data?: PartialMessage<File>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "salto.nebula.file.v1.File";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "upload_uri", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): File {
    return new File().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): File {
    return new File().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): File {
    return new File().fromJsonString(jsonString, options);
  }

  static equals(a: File | PlainMessage<File> | undefined, b: File | PlainMessage<File> | undefined): boolean {
    return proto3.util.equals(File, a, b);
  }
}

/**
 * The request message for [CreateFile][salto.nebula.file.v1.FileService.CreateFile]
 *
 * @generated from message salto.nebula.file.v1.CreateFileRequest
 */
export class CreateFileRequest extends Message<CreateFileRequest> {
  /**
   * Resource name of the parent resource where to create the file. For
   * example, `installations/surelock-homes-hq`.
   *
   * @generated from field: string parent = 1;
   */
  parent = "";

  constructor(data?: PartialMessage<CreateFileRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "salto.nebula.file.v1.CreateFileRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "parent", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateFileRequest {
    return new CreateFileRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateFileRequest {
    return new CreateFileRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateFileRequest {
    return new CreateFileRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateFileRequest | PlainMessage<CreateFileRequest> | undefined, b: CreateFileRequest | PlainMessage<CreateFileRequest> | undefined): boolean {
    return proto3.util.equals(CreateFileRequest, a, b);
  }
}

